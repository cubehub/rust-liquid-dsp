/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub real: ::libc::c_float,
    pub imag: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type liquid_float_complex = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub real: ::libc::c_double,
    pub imag: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type liquid_double_complex = Struct_Unnamed2;
pub enum Struct_agc_crcf_s { }
pub type agc_crcf = *mut Struct_agc_crcf_s;
pub enum Struct_agc_rrrf_s { }
pub type agc_rrrf = *mut Struct_agc_rrrf_s;
pub enum Struct_cvsd_s { }
pub type cvsd = *mut Struct_cvsd_s;
pub enum Struct_cbufferf_s { }
pub type cbufferf = *mut Struct_cbufferf_s;
pub enum Struct_cbuffercf_s { }
pub type cbuffercf = *mut Struct_cbuffercf_s;
pub enum Struct_windowf_s { }
pub type windowf = *mut Struct_windowf_s;
pub enum Struct_windowcf_s { }
pub type windowcf = *mut Struct_windowcf_s;
pub enum Struct_wdelayf_s { }
pub type wdelayf = *mut Struct_wdelayf_s;
pub enum Struct_wdelaycf_s { }
pub type wdelaycf = *mut Struct_wdelaycf_s;
pub enum Struct_dotprod_rrrf_s { }
pub type dotprod_rrrf = *mut Struct_dotprod_rrrf_s;
pub enum Struct_dotprod_cccf_s { }
pub type dotprod_cccf = *mut Struct_dotprod_cccf_s;
pub enum Struct_dotprod_crcf_s { }
pub type dotprod_crcf = *mut Struct_dotprod_crcf_s;
pub enum Struct_eqlms_rrrf_s { }
pub type eqlms_rrrf = *mut Struct_eqlms_rrrf_s;
pub enum Struct_eqlms_cccf_s { }
pub type eqlms_cccf = *mut Struct_eqlms_cccf_s;
pub enum Struct_eqrls_rrrf_s { }
pub type eqrls_rrrf = *mut Struct_eqrls_rrrf_s;
pub enum Struct_eqrls_cccf_s { }
pub type eqrls_cccf = *mut Struct_eqrls_cccf_s;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const LIQUID_CRC_UNKNOWN: ::libc::c_uint = 0;
pub const LIQUID_CRC_NONE: ::libc::c_uint = 1;
pub const LIQUID_CRC_CHECKSUM: ::libc::c_uint = 2;
pub const LIQUID_CRC_8: ::libc::c_uint = 3;
pub const LIQUID_CRC_16: ::libc::c_uint = 4;
pub const LIQUID_CRC_24: ::libc::c_uint = 5;
pub const LIQUID_CRC_32: ::libc::c_uint = 6;
pub type crc_scheme = Enum_Unnamed3;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const LIQUID_FEC_UNKNOWN: ::libc::c_uint = 0;
pub const LIQUID_FEC_NONE: ::libc::c_uint = 1;
pub const LIQUID_FEC_REP3: ::libc::c_uint = 2;
pub const LIQUID_FEC_REP5: ::libc::c_uint = 3;
pub const LIQUID_FEC_HAMMING74: ::libc::c_uint = 4;
pub const LIQUID_FEC_HAMMING84: ::libc::c_uint = 5;
pub const LIQUID_FEC_HAMMING128: ::libc::c_uint = 6;
pub const LIQUID_FEC_GOLAY2412: ::libc::c_uint = 7;
pub const LIQUID_FEC_SECDED2216: ::libc::c_uint = 8;
pub const LIQUID_FEC_SECDED3932: ::libc::c_uint = 9;
pub const LIQUID_FEC_SECDED7264: ::libc::c_uint = 10;
pub const LIQUID_FEC_CONV_V27: ::libc::c_uint = 11;
pub const LIQUID_FEC_CONV_V29: ::libc::c_uint = 12;
pub const LIQUID_FEC_CONV_V39: ::libc::c_uint = 13;
pub const LIQUID_FEC_CONV_V615: ::libc::c_uint = 14;
pub const LIQUID_FEC_CONV_V27P23: ::libc::c_uint = 15;
pub const LIQUID_FEC_CONV_V27P34: ::libc::c_uint = 16;
pub const LIQUID_FEC_CONV_V27P45: ::libc::c_uint = 17;
pub const LIQUID_FEC_CONV_V27P56: ::libc::c_uint = 18;
pub const LIQUID_FEC_CONV_V27P67: ::libc::c_uint = 19;
pub const LIQUID_FEC_CONV_V27P78: ::libc::c_uint = 20;
pub const LIQUID_FEC_CONV_V29P23: ::libc::c_uint = 21;
pub const LIQUID_FEC_CONV_V29P34: ::libc::c_uint = 22;
pub const LIQUID_FEC_CONV_V29P45: ::libc::c_uint = 23;
pub const LIQUID_FEC_CONV_V29P56: ::libc::c_uint = 24;
pub const LIQUID_FEC_CONV_V29P67: ::libc::c_uint = 25;
pub const LIQUID_FEC_CONV_V29P78: ::libc::c_uint = 26;
pub const LIQUID_FEC_RS_M8: ::libc::c_uint = 27;
pub type fec_scheme = Enum_Unnamed4;
pub enum Struct_fec_s { }
pub type fec = *mut Struct_fec_s;
pub enum Struct_packetizer_s { }
pub type packetizer = *mut Struct_packetizer_s;
pub enum Struct_interleaver_s { }
pub type interleaver = *mut Struct_interleaver_s;
pub type Enum_Unnamed5 = ::libc::c_int;
pub const LIQUID_FFT_UNKNOWN: ::libc::c_int = 0;
pub const LIQUID_FFT_FORWARD: ::libc::c_int = 1;
pub const LIQUID_FFT_BACKWARD: ::libc::c_int = -1;
pub const LIQUID_FFT_REDFT00: ::libc::c_int = 10;
pub const LIQUID_FFT_REDFT10: ::libc::c_int = 11;
pub const LIQUID_FFT_REDFT01: ::libc::c_int = 12;
pub const LIQUID_FFT_REDFT11: ::libc::c_int = 13;
pub const LIQUID_FFT_RODFT00: ::libc::c_int = 20;
pub const LIQUID_FFT_RODFT10: ::libc::c_int = 21;
pub const LIQUID_FFT_RODFT01: ::libc::c_int = 22;
pub const LIQUID_FFT_RODFT11: ::libc::c_int = 23;
pub const LIQUID_FFT_MDCT: ::libc::c_int = 30;
pub const LIQUID_FFT_IMDCT: ::libc::c_int = 31;
pub type liquid_fft_type = Enum_Unnamed5;
pub enum Struct_fftplan_s { }
pub type fftplan = *mut Struct_fftplan_s;
pub enum Struct_spgramcf_s { }
pub type spgramcf = *mut Struct_spgramcf_s;
pub enum Struct_spgramf_s { }
pub type spgramf = *mut Struct_spgramf_s;
pub enum Struct_asgramcf_s { }
pub type asgramcf = *mut Struct_asgramcf_s;
pub enum Struct_asgramf_s { }
pub type asgramf = *mut Struct_asgramf_s;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const LIQUID_FIRFILT_UNKNOWN: ::libc::c_uint = 0;
pub const LIQUID_FIRFILT_KAISER: ::libc::c_uint = 1;
pub const LIQUID_FIRFILT_PM: ::libc::c_uint = 2;
pub const LIQUID_FIRFILT_RCOS: ::libc::c_uint = 3;
pub const LIQUID_FIRFILT_FEXP: ::libc::c_uint = 4;
pub const LIQUID_FIRFILT_FSECH: ::libc::c_uint = 5;
pub const LIQUID_FIRFILT_FARCSECH: ::libc::c_uint = 6;
pub const LIQUID_FIRFILT_ARKAISER: ::libc::c_uint = 7;
pub const LIQUID_FIRFILT_RKAISER: ::libc::c_uint = 8;
pub const LIQUID_FIRFILT_RRC: ::libc::c_uint = 9;
pub const LIQUID_FIRFILT_hM3: ::libc::c_uint = 10;
pub const LIQUID_FIRFILT_GMSKTX: ::libc::c_uint = 11;
pub const LIQUID_FIRFILT_GMSKRX: ::libc::c_uint = 12;
pub const LIQUID_FIRFILT_RFEXP: ::libc::c_uint = 13;
pub const LIQUID_FIRFILT_RFSECH: ::libc::c_uint = 14;
pub const LIQUID_FIRFILT_RFARCSECH: ::libc::c_uint = 15;
pub type liquid_firfilt_type = Enum_Unnamed6;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const LIQUID_FIRDESPM_BANDPASS: ::libc::c_uint = 0;
pub const LIQUID_FIRDESPM_DIFFERENTIATOR: ::libc::c_uint = 1;
pub const LIQUID_FIRDESPM_HILBERT: ::libc::c_uint = 2;
pub type liquid_firdespm_btype = Enum_Unnamed7;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const LIQUID_FIRDESPM_FLATWEIGHT: ::libc::c_uint = 0;
pub const LIQUID_FIRDESPM_EXPWEIGHT: ::libc::c_uint = 1;
pub const LIQUID_FIRDESPM_LINWEIGHT: ::libc::c_uint = 2;
pub type liquid_firdespm_wtype = Enum_Unnamed8;
pub enum Struct_firdespm_s { }
pub type firdespm = *mut Struct_firdespm_s;
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const LIQUID_IIRDES_BUTTER: ::libc::c_uint = 0;
pub const LIQUID_IIRDES_CHEBY1: ::libc::c_uint = 1;
pub const LIQUID_IIRDES_CHEBY2: ::libc::c_uint = 2;
pub const LIQUID_IIRDES_ELLIP: ::libc::c_uint = 3;
pub const LIQUID_IIRDES_BESSEL: ::libc::c_uint = 4;
pub type liquid_iirdes_filtertype = Enum_Unnamed9;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const LIQUID_IIRDES_LOWPASS: ::libc::c_uint = 0;
pub const LIQUID_IIRDES_HIGHPASS: ::libc::c_uint = 1;
pub const LIQUID_IIRDES_BANDPASS: ::libc::c_uint = 2;
pub const LIQUID_IIRDES_BANDSTOP: ::libc::c_uint = 3;
pub type liquid_iirdes_bandtype = Enum_Unnamed10;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const LIQUID_IIRDES_SOS: ::libc::c_uint = 0;
pub const LIQUID_IIRDES_TF: ::libc::c_uint = 1;
pub type liquid_iirdes_format = Enum_Unnamed11;
pub enum Struct_autocorr_cccf_s { }
pub type autocorr_cccf = *mut Struct_autocorr_cccf_s;
pub enum Struct_autocorr_rrrf_s { }
pub type autocorr_rrrf = *mut Struct_autocorr_rrrf_s;
pub enum Struct_firfilt_rrrf_s { }
pub type firfilt_rrrf = *mut Struct_firfilt_rrrf_s;
pub enum Struct_firfilt_crcf_s { }
pub type firfilt_crcf = *mut Struct_firfilt_crcf_s;
pub enum Struct_firfilt_cccf_s { }
pub type firfilt_cccf = *mut Struct_firfilt_cccf_s;
pub enum Struct_firhilbf_s { }
pub type firhilbf = *mut Struct_firhilbf_s;
pub enum Struct_fftfilt_rrrf_s { }
pub type fftfilt_rrrf = *mut Struct_fftfilt_rrrf_s;
pub enum Struct_fftfilt_crcf_s { }
pub type fftfilt_crcf = *mut Struct_fftfilt_crcf_s;
pub enum Struct_fftfilt_cccf_s { }
pub type fftfilt_cccf = *mut Struct_fftfilt_cccf_s;
pub enum Struct_iirfilt_rrrf_s { }
pub type iirfilt_rrrf = *mut Struct_iirfilt_rrrf_s;
pub enum Struct_iirfilt_crcf_s { }
pub type iirfilt_crcf = *mut Struct_iirfilt_crcf_s;
pub enum Struct_iirfilt_cccf_s { }
pub type iirfilt_cccf = *mut Struct_iirfilt_cccf_s;
pub enum Struct_firpfb_rrrf_s { }
pub type firpfb_rrrf = *mut Struct_firpfb_rrrf_s;
pub enum Struct_firpfb_crcf_s { }
pub type firpfb_crcf = *mut Struct_firpfb_crcf_s;
pub enum Struct_firpfb_cccf_s { }
pub type firpfb_cccf = *mut Struct_firpfb_cccf_s;
pub enum Struct_firinterp_rrrf_s { }
pub type firinterp_rrrf = *mut Struct_firinterp_rrrf_s;
pub enum Struct_firinterp_crcf_s { }
pub type firinterp_crcf = *mut Struct_firinterp_crcf_s;
pub enum Struct_firinterp_cccf_s { }
pub type firinterp_cccf = *mut Struct_firinterp_cccf_s;
pub enum Struct_iirinterp_rrrf_s { }
pub type iirinterp_rrrf = *mut Struct_iirinterp_rrrf_s;
pub enum Struct_iirinterp_crcf_s { }
pub type iirinterp_crcf = *mut Struct_iirinterp_crcf_s;
pub enum Struct_iirinterp_cccf_s { }
pub type iirinterp_cccf = *mut Struct_iirinterp_cccf_s;
pub enum Struct_firdecim_rrrf_s { }
pub type firdecim_rrrf = *mut Struct_firdecim_rrrf_s;
pub enum Struct_firdecim_crcf_s { }
pub type firdecim_crcf = *mut Struct_firdecim_crcf_s;
pub enum Struct_firdecim_cccf_s { }
pub type firdecim_cccf = *mut Struct_firdecim_cccf_s;
pub enum Struct_iirdecim_rrrf_s { }
pub type iirdecim_rrrf = *mut Struct_iirdecim_rrrf_s;
pub enum Struct_iirdecim_crcf_s { }
pub type iirdecim_crcf = *mut Struct_iirdecim_crcf_s;
pub enum Struct_iirdecim_cccf_s { }
pub type iirdecim_cccf = *mut Struct_iirdecim_cccf_s;
pub enum Struct_resamp2_rrrf_s { }
pub type resamp2_rrrf = *mut Struct_resamp2_rrrf_s;
pub enum Struct_resamp2_crcf_s { }
pub type resamp2_crcf = *mut Struct_resamp2_crcf_s;
pub enum Struct_resamp2_cccf_s { }
pub type resamp2_cccf = *mut Struct_resamp2_cccf_s;
pub enum Struct_resamp_rrrf_s { }
pub type resamp_rrrf = *mut Struct_resamp_rrrf_s;
pub enum Struct_resamp_crcf_s { }
pub type resamp_crcf = *mut Struct_resamp_crcf_s;
pub enum Struct_resamp_cccf_s { }
pub type resamp_cccf = *mut Struct_resamp_cccf_s;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const LIQUID_RESAMP_INTERP: ::libc::c_uint = 0;
pub const LIQUID_RESAMP_DECIM: ::libc::c_uint = 1;
pub type liquid_resamp_type = Enum_Unnamed12;
pub enum Struct_msresamp2_rrrf_s { }
pub type msresamp2_rrrf = *mut Struct_msresamp2_rrrf_s;
pub enum Struct_msresamp2_crcf_s { }
pub type msresamp2_crcf = *mut Struct_msresamp2_crcf_s;
pub enum Struct_msresamp2_cccf_s { }
pub type msresamp2_cccf = *mut Struct_msresamp2_cccf_s;
pub enum Struct_msresamp_rrrf_s { }
pub type msresamp_rrrf = *mut Struct_msresamp_rrrf_s;
pub enum Struct_msresamp_crcf_s { }
pub type msresamp_crcf = *mut Struct_msresamp_crcf_s;
pub enum Struct_msresamp_cccf_s { }
pub type msresamp_cccf = *mut Struct_msresamp_cccf_s;
pub enum Struct_symsync_rrrf_s { }
pub type symsync_rrrf = *mut Struct_symsync_rrrf_s;
pub enum Struct_symsync_crcf_s { }
pub type symsync_crcf = *mut Struct_symsync_crcf_s;
pub enum Struct_firfarrow_rrrf_s { }
pub type firfarrow_rrrf = *mut Struct_firfarrow_rrrf_s;
pub enum Struct_firfarrow_crcf_s { }
pub type firfarrow_crcf = *mut Struct_firfarrow_crcf_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub evm: ::libc::c_float,
    pub rssi: ::libc::c_float,
    pub cfo: ::libc::c_float,
    pub framesyms: *mut liquid_float_complex,
    pub num_framesyms: ::libc::c_uint,
    pub mod_scheme: ::libc::c_uint,
    pub mod_bps: ::libc::c_uint,
    pub check: ::libc::c_uint,
    pub fec0: ::libc::c_uint,
    pub fec1: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type framesyncstats_s = Struct_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub num_frames_detected: ::libc::c_uint,
    pub num_headers_valid: ::libc::c_uint,
    pub num_payloads_valid: ::libc::c_uint,
    pub num_bytes_received: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type framedatastats_s = Struct_Unnamed14;
pub type framesync_callback =
    ::std::option::Option<extern "C" fn(_header: *mut ::libc::c_uchar,
                                        _header_valid: ::libc::c_int,
                                        _payload: *mut ::libc::c_uchar,
                                        _payload_len: ::libc::c_uint,
                                        _payload_valid: ::libc::c_int,
                                        _stats: framesyncstats_s,
                                        _userdata: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type framesync_csma_callback =
    ::std::option::Option<extern "C" fn(_userdata: *mut ::libc::c_void)
                              -> ()>;
pub enum Struct_qpacketmodem_s { }
pub type qpacketmodem = *mut Struct_qpacketmodem_s;
pub enum Struct_qpilotgen_s { }
pub type qpilotgen = *mut Struct_qpilotgen_s;
pub enum Struct_qpilotsync_s { }
pub type qpilotsync = *mut Struct_qpilotsync_s;
pub enum Struct_framegen64_s { }
pub type framegen64 = *mut Struct_framegen64_s;
pub enum Struct_framesync64_s { }
pub type framesync64 = *mut Struct_framesync64_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub check: ::libc::c_uint,
    pub fec0: ::libc::c_uint,
    pub fec1: ::libc::c_uint,
    pub mod_scheme: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type flexframegenprops_s = Struct_Unnamed15;
pub enum Struct_flexframegen_s { }
pub type flexframegen = *mut Struct_flexframegen_s;
pub enum Struct_flexframesync_s { }
pub type flexframesync = *mut Struct_flexframesync_s;
pub enum Struct_bpacketgen_s { }
pub type bpacketgen = *mut Struct_bpacketgen_s;
pub enum Struct_bpacketsync_s { }
pub type bpacketsync = *mut Struct_bpacketsync_s;
pub type bpacketsync_callback =
    ::std::option::Option<extern "C" fn(_payload: *mut ::libc::c_uchar,
                                        _payload_valid: ::libc::c_int,
                                        _payload_len: ::libc::c_uint,
                                        _stats: framesyncstats_s,
                                        _userdata: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub enum Struct_gmskframegen_s { }
pub type gmskframegen = *mut Struct_gmskframegen_s;
pub enum Struct_gmskframesync_s { }
pub type gmskframesync = *mut Struct_gmskframesync_s;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub check: ::libc::c_uint,
    pub fec0: ::libc::c_uint,
    pub fec1: ::libc::c_uint,
    pub mod_scheme: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ofdmflexframegenprops_s = Struct_Unnamed16;
pub enum Struct_ofdmflexframegen_s { }
pub type ofdmflexframegen = *mut Struct_ofdmflexframegen_s;
pub enum Struct_ofdmflexframesync_s { }
pub type ofdmflexframesync = *mut Struct_ofdmflexframesync_s;
pub enum Struct_bsync_rrrf_s { }
pub type bsync_rrrf = *mut Struct_bsync_rrrf_s;
pub enum Struct_bsync_crcf_s { }
pub type bsync_crcf = *mut Struct_bsync_crcf_s;
pub enum Struct_bsync_cccf_s { }
pub type bsync_cccf = *mut Struct_bsync_cccf_s;
pub enum Struct_presync_cccf_s { }
pub type presync_cccf = *mut Struct_presync_cccf_s;
pub enum Struct_bpresync_cccf_s { }
pub type bpresync_cccf = *mut Struct_bpresync_cccf_s;
pub enum Struct_qdetector_cccf_s { }
pub type qdetector_cccf = *mut Struct_qdetector_cccf_s;
pub enum Struct_detector_cccf_s { }
pub type detector_cccf = *mut Struct_detector_cccf_s;
pub enum Struct_smatrixb_s { }
pub type smatrixb = *mut Struct_smatrixb_s;
pub enum Struct_smatrixf_s { }
pub type smatrixf = *mut Struct_smatrixf_s;
pub enum Struct_smatrixi_s { }
pub type smatrixi = *mut Struct_smatrixi_s;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const LIQUID_MODEM_UNKNOWN: ::libc::c_uint = 0;
pub const LIQUID_MODEM_PSK2: ::libc::c_uint = 1;
pub const LIQUID_MODEM_PSK4: ::libc::c_uint = 2;
pub const LIQUID_MODEM_PSK8: ::libc::c_uint = 3;
pub const LIQUID_MODEM_PSK16: ::libc::c_uint = 4;
pub const LIQUID_MODEM_PSK32: ::libc::c_uint = 5;
pub const LIQUID_MODEM_PSK64: ::libc::c_uint = 6;
pub const LIQUID_MODEM_PSK128: ::libc::c_uint = 7;
pub const LIQUID_MODEM_PSK256: ::libc::c_uint = 8;
pub const LIQUID_MODEM_DPSK2: ::libc::c_uint = 9;
pub const LIQUID_MODEM_DPSK4: ::libc::c_uint = 10;
pub const LIQUID_MODEM_DPSK8: ::libc::c_uint = 11;
pub const LIQUID_MODEM_DPSK16: ::libc::c_uint = 12;
pub const LIQUID_MODEM_DPSK32: ::libc::c_uint = 13;
pub const LIQUID_MODEM_DPSK64: ::libc::c_uint = 14;
pub const LIQUID_MODEM_DPSK128: ::libc::c_uint = 15;
pub const LIQUID_MODEM_DPSK256: ::libc::c_uint = 16;
pub const LIQUID_MODEM_ASK2: ::libc::c_uint = 17;
pub const LIQUID_MODEM_ASK4: ::libc::c_uint = 18;
pub const LIQUID_MODEM_ASK8: ::libc::c_uint = 19;
pub const LIQUID_MODEM_ASK16: ::libc::c_uint = 20;
pub const LIQUID_MODEM_ASK32: ::libc::c_uint = 21;
pub const LIQUID_MODEM_ASK64: ::libc::c_uint = 22;
pub const LIQUID_MODEM_ASK128: ::libc::c_uint = 23;
pub const LIQUID_MODEM_ASK256: ::libc::c_uint = 24;
pub const LIQUID_MODEM_QAM4: ::libc::c_uint = 25;
pub const LIQUID_MODEM_QAM8: ::libc::c_uint = 26;
pub const LIQUID_MODEM_QAM16: ::libc::c_uint = 27;
pub const LIQUID_MODEM_QAM32: ::libc::c_uint = 28;
pub const LIQUID_MODEM_QAM64: ::libc::c_uint = 29;
pub const LIQUID_MODEM_QAM128: ::libc::c_uint = 30;
pub const LIQUID_MODEM_QAM256: ::libc::c_uint = 31;
pub const LIQUID_MODEM_APSK4: ::libc::c_uint = 32;
pub const LIQUID_MODEM_APSK8: ::libc::c_uint = 33;
pub const LIQUID_MODEM_APSK16: ::libc::c_uint = 34;
pub const LIQUID_MODEM_APSK32: ::libc::c_uint = 35;
pub const LIQUID_MODEM_APSK64: ::libc::c_uint = 36;
pub const LIQUID_MODEM_APSK128: ::libc::c_uint = 37;
pub const LIQUID_MODEM_APSK256: ::libc::c_uint = 38;
pub const LIQUID_MODEM_BPSK: ::libc::c_uint = 39;
pub const LIQUID_MODEM_QPSK: ::libc::c_uint = 40;
pub const LIQUID_MODEM_OOK: ::libc::c_uint = 41;
pub const LIQUID_MODEM_SQAM32: ::libc::c_uint = 42;
pub const LIQUID_MODEM_SQAM128: ::libc::c_uint = 43;
pub const LIQUID_MODEM_V29: ::libc::c_uint = 44;
pub const LIQUID_MODEM_ARB16OPT: ::libc::c_uint = 45;
pub const LIQUID_MODEM_ARB32OPT: ::libc::c_uint = 46;
pub const LIQUID_MODEM_ARB64OPT: ::libc::c_uint = 47;
pub const LIQUID_MODEM_ARB128OPT: ::libc::c_uint = 48;
pub const LIQUID_MODEM_ARB256OPT: ::libc::c_uint = 49;
pub const LIQUID_MODEM_ARB64VT: ::libc::c_uint = 50;
pub const LIQUID_MODEM_ARB: ::libc::c_uint = 51;
pub type modulation_scheme = Enum_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_modulation_type_s {
    pub name: *const ::libc::c_char,
    pub fullname: *const ::libc::c_char,
    pub scheme: modulation_scheme,
    pub bps: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_modulation_type_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_modulation_type_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_modem_s { }
pub type modem = *mut Struct_modem_s;
pub enum Struct_gmskmod_s { }
pub type gmskmod = *mut Struct_gmskmod_s;
pub enum Struct_gmskdem_s { }
pub type gmskdem = *mut Struct_gmskdem_s;
pub enum Struct_freqmod_s { }
pub type freqmod = *mut Struct_freqmod_s;
pub enum Struct_freqdem_s { }
pub type freqdem = *mut Struct_freqdem_s;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const LIQUID_AMPMODEM_DSB: ::libc::c_uint = 0;
pub const LIQUID_AMPMODEM_USB: ::libc::c_uint = 1;
pub const LIQUID_AMPMODEM_LSB: ::libc::c_uint = 2;
pub type liquid_ampmodem_type = Enum_Unnamed18;
pub enum Struct_ampmodem_s { }
pub type ampmodem = *mut Struct_ampmodem_s;
pub enum Struct_firpfbch_crcf_s { }
pub type firpfbch_crcf = *mut Struct_firpfbch_crcf_s;
pub enum Struct_firpfbch_cccf_s { }
pub type firpfbch_cccf = *mut Struct_firpfbch_cccf_s;
pub enum Struct_firpfbch2_crcf_s { }
pub type firpfbch2_crcf = *mut Struct_firpfbch2_crcf_s;
pub enum Struct_ofdmframegen_s { }
pub type ofdmframegen = *mut Struct_ofdmframegen_s;
pub type ofdmframesync_callback =
    ::std::option::Option<extern "C" fn(_y: *mut liquid_float_complex,
                                        _p: *mut ::libc::c_uchar,
                                        _M: ::libc::c_uint,
                                        _userdata: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub enum Struct_ofdmframesync_s { }
pub type ofdmframesync = *mut Struct_ofdmframesync_s;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const LIQUID_NCO: ::libc::c_uint = 0;
pub const LIQUID_VCO: ::libc::c_uint = 1;
pub type liquid_ncotype = Enum_Unnamed19;
pub enum Struct_nco_crcf_s { }
pub type nco_crcf = *mut Struct_nco_crcf_s;
pub type utility_function =
    ::std::option::Option<extern "C" fn(_userdata: *mut ::libc::c_void,
                                        _v: *mut ::libc::c_float,
                                        _n: ::libc::c_uint)
                              -> ::libc::c_float>;
pub enum Struct_gradsearch_s { }
pub type gradsearch = *mut Struct_gradsearch_s;
pub enum Struct_qnsearch_s { }
pub type qnsearch = *mut Struct_qnsearch_s;
pub enum Struct_chromosome_s { }
pub type chromosome = *mut Struct_chromosome_s;
pub enum Struct_gasearch_s { }
pub type gasearch = *mut Struct_gasearch_s;
pub type gasearch_utility =
    ::std::option::Option<extern "C" fn(_userdata: *mut ::libc::c_void,
                                        _c: chromosome) -> ::libc::c_float>;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const LIQUID_COMPANDER_NONE: ::libc::c_uint = 0;
pub const LIQUID_COMPANDER_LINEAR: ::libc::c_uint = 1;
pub const LIQUID_COMPANDER_MULAW: ::libc::c_uint = 2;
pub const LIQUID_COMPANDER_ALAW: ::libc::c_uint = 3;
pub type liquid_compander_type = Enum_Unnamed20;
pub enum Struct_quantizerf_s { }
pub type quantizerf = *mut Struct_quantizerf_s;
pub enum Struct_quantizercf_s { }
pub type quantizercf = *mut Struct_quantizercf_s;
pub enum Struct_bsequence_s { }
pub type bsequence = *mut Struct_bsequence_s;
pub enum Struct_msequence_s { }
pub type msequence = *mut Struct_msequence_s;
#[link(name = "liquid")]
extern "C" {
    pub static mut liquid_version: *const ::libc::c_char;
    pub static mut crc_scheme_str: [[*const ::libc::c_char; 2usize]; 7usize];
    pub static mut fec_scheme_str: [[*const ::libc::c_char; 2usize]; 28usize];
    pub static mut framesyncstats_default: framesyncstats_s;
    pub static mut modulation_types: [Struct_modulation_type_s; 52usize];
}
#[link(name = "liquid")]
extern "C" {
    pub fn liquid_libversion() -> *const ::libc::c_char;
    pub fn liquid_libversion_number() -> ::libc::c_int;
    pub fn agc_crcf_create() -> agc_crcf;
    pub fn agc_crcf_destroy(_q: agc_crcf) -> ();
    pub fn agc_crcf_print(_q: agc_crcf) -> ();
    pub fn agc_crcf_reset(_q: agc_crcf) -> ();
    pub fn agc_crcf_execute(_q: agc_crcf, _x: liquid_float_complex,
                            _y: *mut liquid_float_complex) -> ();
    pub fn agc_crcf_execute_block(_q: agc_crcf, _x: *mut liquid_float_complex,
                                  _n: ::libc::c_uint,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn agc_crcf_lock(_q: agc_crcf) -> ();
    pub fn agc_crcf_unlock(_q: agc_crcf) -> ();
    pub fn agc_crcf_get_bandwidth(_q: agc_crcf) -> ::libc::c_float;
    pub fn agc_crcf_set_bandwidth(_q: agc_crcf, _bt: ::libc::c_float) -> ();
    pub fn agc_crcf_get_signal_level(_q: agc_crcf) -> ::libc::c_float;
    pub fn agc_crcf_set_signal_level(_q: agc_crcf,
                                     _signal_level: ::libc::c_float) -> ();
    pub fn agc_crcf_get_rssi(_q: agc_crcf) -> ::libc::c_float;
    pub fn agc_crcf_set_rssi(_q: agc_crcf, _rssi: ::libc::c_float) -> ();
    pub fn agc_crcf_get_gain(_q: agc_crcf) -> ::libc::c_float;
    pub fn agc_crcf_set_gain(_q: agc_crcf, _gain: ::libc::c_float) -> ();
    pub fn agc_crcf_init(_q: agc_crcf, _x: *mut liquid_float_complex,
                         _n: ::libc::c_uint) -> ();
    pub fn agc_rrrf_create() -> agc_rrrf;
    pub fn agc_rrrf_destroy(_q: agc_rrrf) -> ();
    pub fn agc_rrrf_print(_q: agc_rrrf) -> ();
    pub fn agc_rrrf_reset(_q: agc_rrrf) -> ();
    pub fn agc_rrrf_execute(_q: agc_rrrf, _x: ::libc::c_float,
                            _y: *mut ::libc::c_float) -> ();
    pub fn agc_rrrf_execute_block(_q: agc_rrrf, _x: *mut ::libc::c_float,
                                  _n: ::libc::c_uint,
                                  _y: *mut ::libc::c_float) -> ();
    pub fn agc_rrrf_lock(_q: agc_rrrf) -> ();
    pub fn agc_rrrf_unlock(_q: agc_rrrf) -> ();
    pub fn agc_rrrf_get_bandwidth(_q: agc_rrrf) -> ::libc::c_float;
    pub fn agc_rrrf_set_bandwidth(_q: agc_rrrf, _bt: ::libc::c_float) -> ();
    pub fn agc_rrrf_get_signal_level(_q: agc_rrrf) -> ::libc::c_float;
    pub fn agc_rrrf_set_signal_level(_q: agc_rrrf,
                                     _signal_level: ::libc::c_float) -> ();
    pub fn agc_rrrf_get_rssi(_q: agc_rrrf) -> ::libc::c_float;
    pub fn agc_rrrf_set_rssi(_q: agc_rrrf, _rssi: ::libc::c_float) -> ();
    pub fn agc_rrrf_get_gain(_q: agc_rrrf) -> ::libc::c_float;
    pub fn agc_rrrf_set_gain(_q: agc_rrrf, _gain: ::libc::c_float) -> ();
    pub fn agc_rrrf_init(_q: agc_rrrf, _x: *mut ::libc::c_float,
                         _n: ::libc::c_uint) -> ();
    pub fn cvsd_create(_num_bits: ::libc::c_uint, _zeta: ::libc::c_float,
                       _alpha: ::libc::c_float) -> cvsd;
    pub fn cvsd_destroy(_q: cvsd) -> ();
    pub fn cvsd_print(_q: cvsd) -> ();
    pub fn cvsd_encode(_q: cvsd, _audio_sample: ::libc::c_float)
     -> ::libc::c_uchar;
    pub fn cvsd_decode(_q: cvsd, _bit: ::libc::c_uchar) -> ::libc::c_float;
    pub fn cvsd_encode8(_q: cvsd, _audio: *mut ::libc::c_float,
                        _data: *mut ::libc::c_uchar) -> ();
    pub fn cvsd_decode8(_q: cvsd, _data: ::libc::c_uchar,
                        _audio: *mut ::libc::c_float) -> ();
    pub fn cbufferf_create(_max_size: ::libc::c_uint) -> cbufferf;
    pub fn cbufferf_create_max(_max_size: ::libc::c_uint,
                               _max_read: ::libc::c_uint) -> cbufferf;
    pub fn cbufferf_destroy(_q: cbufferf) -> ();
    pub fn cbufferf_print(_q: cbufferf) -> ();
    pub fn cbufferf_debug_print(_q: cbufferf) -> ();
    pub fn cbufferf_clear(_q: cbufferf) -> ();
    pub fn cbufferf_size(_q: cbufferf) -> ::libc::c_uint;
    pub fn cbufferf_max_size(_q: cbufferf) -> ::libc::c_uint;
    pub fn cbufferf_max_read(_q: cbufferf) -> ::libc::c_uint;
    pub fn cbufferf_space_available(_q: cbufferf) -> ::libc::c_uint;
    pub fn cbufferf_is_full(_q: cbufferf) -> ::libc::c_int;
    pub fn cbufferf_push(_q: cbufferf, _v: ::libc::c_float) -> ();
    pub fn cbufferf_write(_q: cbufferf, _v: *mut ::libc::c_float,
                          _n: ::libc::c_uint) -> ();
    pub fn cbufferf_pop(_q: cbufferf, _v: *mut ::libc::c_float) -> ();
    pub fn cbufferf_read(_q: cbufferf, _num_requested: ::libc::c_uint,
                         _v: *mut *mut ::libc::c_float,
                         _num_read: *mut ::libc::c_uint) -> ();
    pub fn cbufferf_release(_q: cbufferf, _n: ::libc::c_uint) -> ();
    pub fn cbuffercf_create(_max_size: ::libc::c_uint) -> cbuffercf;
    pub fn cbuffercf_create_max(_max_size: ::libc::c_uint,
                                _max_read: ::libc::c_uint) -> cbuffercf;
    pub fn cbuffercf_destroy(_q: cbuffercf) -> ();
    pub fn cbuffercf_print(_q: cbuffercf) -> ();
    pub fn cbuffercf_debug_print(_q: cbuffercf) -> ();
    pub fn cbuffercf_clear(_q: cbuffercf) -> ();
    pub fn cbuffercf_size(_q: cbuffercf) -> ::libc::c_uint;
    pub fn cbuffercf_max_size(_q: cbuffercf) -> ::libc::c_uint;
    pub fn cbuffercf_max_read(_q: cbuffercf) -> ::libc::c_uint;
    pub fn cbuffercf_space_available(_q: cbuffercf) -> ::libc::c_uint;
    pub fn cbuffercf_is_full(_q: cbuffercf) -> ::libc::c_int;
    pub fn cbuffercf_push(_q: cbuffercf, _v: liquid_float_complex) -> ();
    pub fn cbuffercf_write(_q: cbuffercf, _v: *mut liquid_float_complex,
                           _n: ::libc::c_uint) -> ();
    pub fn cbuffercf_pop(_q: cbuffercf, _v: *mut liquid_float_complex) -> ();
    pub fn cbuffercf_read(_q: cbuffercf, _num_requested: ::libc::c_uint,
                          _v: *mut *mut liquid_float_complex,
                          _num_read: *mut ::libc::c_uint) -> ();
    pub fn cbuffercf_release(_q: cbuffercf, _n: ::libc::c_uint) -> ();
    pub fn windowf_create(_n: ::libc::c_uint) -> windowf;
    pub fn windowf_recreate(_q: windowf, _n: ::libc::c_uint) -> windowf;
    pub fn windowf_destroy(_q: windowf) -> ();
    pub fn windowf_print(_q: windowf) -> ();
    pub fn windowf_debug_print(_q: windowf) -> ();
    pub fn windowf_clear(_q: windowf) -> ();
    pub fn windowf_read(_q: windowf, _v: *mut *mut ::libc::c_float) -> ();
    pub fn windowf_index(_q: windowf, _i: ::libc::c_uint,
                         _v: *mut ::libc::c_float) -> ();
    pub fn windowf_push(_q: windowf, _v: ::libc::c_float) -> ();
    pub fn windowf_write(_q: windowf, _v: *mut ::libc::c_float,
                         _n: ::libc::c_uint) -> ();
    pub fn windowcf_create(_n: ::libc::c_uint) -> windowcf;
    pub fn windowcf_recreate(_q: windowcf, _n: ::libc::c_uint) -> windowcf;
    pub fn windowcf_destroy(_q: windowcf) -> ();
    pub fn windowcf_print(_q: windowcf) -> ();
    pub fn windowcf_debug_print(_q: windowcf) -> ();
    pub fn windowcf_clear(_q: windowcf) -> ();
    pub fn windowcf_read(_q: windowcf, _v: *mut *mut liquid_float_complex)
     -> ();
    pub fn windowcf_index(_q: windowcf, _i: ::libc::c_uint,
                          _v: *mut liquid_float_complex) -> ();
    pub fn windowcf_push(_q: windowcf, _v: liquid_float_complex) -> ();
    pub fn windowcf_write(_q: windowcf, _v: *mut liquid_float_complex,
                          _n: ::libc::c_uint) -> ();
    pub fn wdelayf_create(_delay: ::libc::c_uint) -> wdelayf;
    pub fn wdelayf_recreate(_q: wdelayf, _delay: ::libc::c_uint) -> wdelayf;
    pub fn wdelayf_destroy(_q: wdelayf) -> ();
    pub fn wdelayf_print(_q: wdelayf) -> ();
    pub fn wdelayf_clear(_q: wdelayf) -> ();
    pub fn wdelayf_read(_q: wdelayf, _v: *mut ::libc::c_float) -> ();
    pub fn wdelayf_push(_q: wdelayf, _v: ::libc::c_float) -> ();
    pub fn wdelaycf_create(_delay: ::libc::c_uint) -> wdelaycf;
    pub fn wdelaycf_recreate(_q: wdelaycf, _delay: ::libc::c_uint)
     -> wdelaycf;
    pub fn wdelaycf_destroy(_q: wdelaycf) -> ();
    pub fn wdelaycf_print(_q: wdelaycf) -> ();
    pub fn wdelaycf_clear(_q: wdelaycf) -> ();
    pub fn wdelaycf_read(_q: wdelaycf, _v: *mut liquid_float_complex) -> ();
    pub fn wdelaycf_push(_q: wdelaycf, _v: liquid_float_complex) -> ();
    pub fn dotprod_rrrf_run(_v: *mut ::libc::c_float,
                            _x: *mut ::libc::c_float, _n: ::libc::c_uint,
                            _y: *mut ::libc::c_float) -> ();
    pub fn dotprod_rrrf_run4(_v: *mut ::libc::c_float,
                             _x: *mut ::libc::c_float, _n: ::libc::c_uint,
                             _y: *mut ::libc::c_float) -> ();
    pub fn dotprod_rrrf_create(_v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> dotprod_rrrf;
    pub fn dotprod_rrrf_recreate(_q: dotprod_rrrf, _v: *mut ::libc::c_float,
                                 _n: ::libc::c_uint) -> dotprod_rrrf;
    pub fn dotprod_rrrf_destroy(_q: dotprod_rrrf) -> ();
    pub fn dotprod_rrrf_print(_q: dotprod_rrrf) -> ();
    pub fn dotprod_rrrf_execute(_q: dotprod_rrrf, _x: *mut ::libc::c_float,
                                _y: *mut ::libc::c_float) -> ();
    pub fn dotprod_cccf_run(_v: *mut liquid_float_complex,
                            _x: *mut liquid_float_complex, _n: ::libc::c_uint,
                            _y: *mut liquid_float_complex) -> ();
    pub fn dotprod_cccf_run4(_v: *mut liquid_float_complex,
                             _x: *mut liquid_float_complex,
                             _n: ::libc::c_uint,
                             _y: *mut liquid_float_complex) -> ();
    pub fn dotprod_cccf_create(_v: *mut liquid_float_complex,
                               _n: ::libc::c_uint) -> dotprod_cccf;
    pub fn dotprod_cccf_recreate(_q: dotprod_cccf,
                                 _v: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> dotprod_cccf;
    pub fn dotprod_cccf_destroy(_q: dotprod_cccf) -> ();
    pub fn dotprod_cccf_print(_q: dotprod_cccf) -> ();
    pub fn dotprod_cccf_execute(_q: dotprod_cccf,
                                _x: *mut liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn dotprod_crcf_run(_v: *mut ::libc::c_float,
                            _x: *mut liquid_float_complex, _n: ::libc::c_uint,
                            _y: *mut liquid_float_complex) -> ();
    pub fn dotprod_crcf_run4(_v: *mut ::libc::c_float,
                             _x: *mut liquid_float_complex,
                             _n: ::libc::c_uint,
                             _y: *mut liquid_float_complex) -> ();
    pub fn dotprod_crcf_create(_v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> dotprod_crcf;
    pub fn dotprod_crcf_recreate(_q: dotprod_crcf, _v: *mut ::libc::c_float,
                                 _n: ::libc::c_uint) -> dotprod_crcf;
    pub fn dotprod_crcf_destroy(_q: dotprod_crcf) -> ();
    pub fn dotprod_crcf_print(_q: dotprod_crcf) -> ();
    pub fn dotprod_crcf_execute(_q: dotprod_crcf,
                                _x: *mut liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn liquid_sumsqf(_v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_sumsqcf(_v: *mut liquid_float_complex, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn eqlms_rrrf_create(_h: *mut ::libc::c_float, _h_len: ::libc::c_uint)
     -> eqlms_rrrf;
    pub fn eqlms_rrrf_create_rnyquist(_type: ::libc::c_int,
                                      _k: ::libc::c_uint, _m: ::libc::c_uint,
                                      _beta: ::libc::c_float,
                                      _dt: ::libc::c_float) -> eqlms_rrrf;
    pub fn eqlms_rrrf_create_lowpass(_h_len: ::libc::c_uint,
                                     _fc: ::libc::c_float) -> eqlms_rrrf;
    pub fn eqlms_rrrf_recreate(_q: eqlms_rrrf, _h: *mut ::libc::c_float,
                               _h_len: ::libc::c_uint) -> eqlms_rrrf;
    pub fn eqlms_rrrf_destroy(_q: eqlms_rrrf) -> ();
    pub fn eqlms_rrrf_reset(_q: eqlms_rrrf) -> ();
    pub fn eqlms_rrrf_print(_q: eqlms_rrrf) -> ();
    pub fn eqlms_rrrf_get_bw(_q: eqlms_rrrf) -> ::libc::c_float;
    pub fn eqlms_rrrf_set_bw(_q: eqlms_rrrf, _lambda: ::libc::c_float) -> ();
    pub fn eqlms_rrrf_push(_q: eqlms_rrrf, _x: ::libc::c_float) -> ();
    pub fn eqlms_rrrf_push_block(_q: eqlms_rrrf, _x: *mut ::libc::c_float,
                                 _n: ::libc::c_uint) -> ();
    pub fn eqlms_rrrf_execute(_q: eqlms_rrrf, _y: *mut ::libc::c_float) -> ();
    pub fn eqlms_rrrf_step(_q: eqlms_rrrf, _d: ::libc::c_float,
                           _d_hat: ::libc::c_float) -> ();
    pub fn eqlms_rrrf_get_weights(_q: eqlms_rrrf, _w: *mut ::libc::c_float)
     -> ();
    pub fn eqlms_rrrf_train(_q: eqlms_rrrf, _w: *mut ::libc::c_float,
                            _x: *mut ::libc::c_float,
                            _d: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ();
    pub fn eqlms_cccf_create(_h: *mut liquid_float_complex,
                             _h_len: ::libc::c_uint) -> eqlms_cccf;
    pub fn eqlms_cccf_create_rnyquist(_type: ::libc::c_int,
                                      _k: ::libc::c_uint, _m: ::libc::c_uint,
                                      _beta: ::libc::c_float,
                                      _dt: ::libc::c_float) -> eqlms_cccf;
    pub fn eqlms_cccf_create_lowpass(_h_len: ::libc::c_uint,
                                     _fc: ::libc::c_float) -> eqlms_cccf;
    pub fn eqlms_cccf_recreate(_q: eqlms_cccf, _h: *mut liquid_float_complex,
                               _h_len: ::libc::c_uint) -> eqlms_cccf;
    pub fn eqlms_cccf_destroy(_q: eqlms_cccf) -> ();
    pub fn eqlms_cccf_reset(_q: eqlms_cccf) -> ();
    pub fn eqlms_cccf_print(_q: eqlms_cccf) -> ();
    pub fn eqlms_cccf_get_bw(_q: eqlms_cccf) -> ::libc::c_float;
    pub fn eqlms_cccf_set_bw(_q: eqlms_cccf, _lambda: ::libc::c_float) -> ();
    pub fn eqlms_cccf_push(_q: eqlms_cccf, _x: liquid_float_complex) -> ();
    pub fn eqlms_cccf_push_block(_q: eqlms_cccf,
                                 _x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> ();
    pub fn eqlms_cccf_execute(_q: eqlms_cccf, _y: *mut liquid_float_complex)
     -> ();
    pub fn eqlms_cccf_step(_q: eqlms_cccf, _d: liquid_float_complex,
                           _d_hat: liquid_float_complex) -> ();
    pub fn eqlms_cccf_get_weights(_q: eqlms_cccf,
                                  _w: *mut liquid_float_complex) -> ();
    pub fn eqlms_cccf_train(_q: eqlms_cccf, _w: *mut liquid_float_complex,
                            _x: *mut liquid_float_complex,
                            _d: *mut liquid_float_complex, _n: ::libc::c_uint)
     -> ();
    pub fn eqrls_rrrf_create(_h: *mut ::libc::c_float, _p: ::libc::c_uint)
     -> eqrls_rrrf;
    pub fn eqrls_rrrf_recreate(_q: eqrls_rrrf, _h: *mut ::libc::c_float,
                               _p: ::libc::c_uint) -> eqrls_rrrf;
    pub fn eqrls_rrrf_destroy(_q: eqrls_rrrf) -> ();
    pub fn eqrls_rrrf_print(_q: eqrls_rrrf) -> ();
    pub fn eqrls_rrrf_reset(_q: eqrls_rrrf) -> ();
    pub fn eqrls_rrrf_get_bw(_q: eqrls_rrrf) -> ::libc::c_float;
    pub fn eqrls_rrrf_set_bw(_q: eqrls_rrrf, _mu: ::libc::c_float) -> ();
    pub fn eqrls_rrrf_push(_q: eqrls_rrrf, _x: ::libc::c_float) -> ();
    pub fn eqrls_rrrf_execute(_q: eqrls_rrrf, _y: *mut ::libc::c_float) -> ();
    pub fn eqrls_rrrf_step(_q: eqrls_rrrf, _d: ::libc::c_float,
                           _d_hat: ::libc::c_float) -> ();
    pub fn eqrls_rrrf_get_weights(_q: eqrls_rrrf, _w: *mut ::libc::c_float)
     -> ();
    pub fn eqrls_rrrf_train(_q: eqrls_rrrf, _w: *mut ::libc::c_float,
                            _x: *mut ::libc::c_float,
                            _d: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ();
    pub fn eqrls_cccf_create(_h: *mut liquid_float_complex,
                             _p: ::libc::c_uint) -> eqrls_cccf;
    pub fn eqrls_cccf_recreate(_q: eqrls_cccf, _h: *mut liquid_float_complex,
                               _p: ::libc::c_uint) -> eqrls_cccf;
    pub fn eqrls_cccf_destroy(_q: eqrls_cccf) -> ();
    pub fn eqrls_cccf_print(_q: eqrls_cccf) -> ();
    pub fn eqrls_cccf_reset(_q: eqrls_cccf) -> ();
    pub fn eqrls_cccf_get_bw(_q: eqrls_cccf) -> ::libc::c_float;
    pub fn eqrls_cccf_set_bw(_q: eqrls_cccf, _mu: ::libc::c_float) -> ();
    pub fn eqrls_cccf_push(_q: eqrls_cccf, _x: liquid_float_complex) -> ();
    pub fn eqrls_cccf_execute(_q: eqrls_cccf, _y: *mut liquid_float_complex)
     -> ();
    pub fn eqrls_cccf_step(_q: eqrls_cccf, _d: liquid_float_complex,
                           _d_hat: liquid_float_complex) -> ();
    pub fn eqrls_cccf_get_weights(_q: eqrls_cccf,
                                  _w: *mut liquid_float_complex) -> ();
    pub fn eqrls_cccf_train(_q: eqrls_cccf, _w: *mut liquid_float_complex,
                            _x: *mut liquid_float_complex,
                            _d: *mut liquid_float_complex, _n: ::libc::c_uint)
     -> ();
    pub fn liquid_print_crc_schemes() -> ();
    pub fn liquid_getopt_str2crc(_str: *const ::libc::c_char) -> crc_scheme;
    pub fn crc_get_length(_scheme: crc_scheme) -> ::libc::c_uint;
    pub fn crc_generate_key(_scheme: crc_scheme, _msg: *mut ::libc::c_uchar,
                            _n: ::libc::c_uint) -> ::libc::c_uint;
    pub fn crc_validate_message(_scheme: crc_scheme,
                                _msg: *mut ::libc::c_uchar,
                                _n: ::libc::c_uint, _key: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn liquid_print_fec_schemes() -> ();
    pub fn liquid_getopt_str2fec(_str: *const ::libc::c_char) -> fec_scheme;
    pub fn fec_get_enc_msg_length(_scheme: fec_scheme,
                                  _msg_len: ::libc::c_uint) -> ::libc::c_uint;
    pub fn fec_get_rate(_scheme: fec_scheme) -> ::libc::c_float;
    pub fn fec_create(_scheme: fec_scheme, _opts: *mut ::libc::c_void) -> fec;
    pub fn fec_recreate(_q: fec, _scheme: fec_scheme,
                        _opts: *mut ::libc::c_void) -> fec;
    pub fn fec_destroy(_q: fec) -> ();
    pub fn fec_print(_q: fec) -> ();
    pub fn fec_encode(_q: fec, _dec_msg_len: ::libc::c_uint,
                      _msg_dec: *mut ::libc::c_uchar,
                      _msg_enc: *mut ::libc::c_uchar) -> ();
    pub fn fec_decode(_q: fec, _dec_msg_len: ::libc::c_uint,
                      _msg_enc: *mut ::libc::c_uchar,
                      _msg_dec: *mut ::libc::c_uchar) -> ();
    pub fn fec_decode_soft(_q: fec, _dec_msg_len: ::libc::c_uint,
                           _msg_enc: *mut ::libc::c_uchar,
                           _msg_dec: *mut ::libc::c_uchar) -> ();
    pub fn packetizer_compute_enc_msg_len(_n: ::libc::c_uint,
                                          _crc: ::libc::c_int,
                                          _fec0: ::libc::c_int,
                                          _fec1: ::libc::c_int)
     -> ::libc::c_uint;
    pub fn packetizer_compute_dec_msg_len(_k: ::libc::c_uint,
                                          _crc: ::libc::c_int,
                                          _fec0: ::libc::c_int,
                                          _fec1: ::libc::c_int)
     -> ::libc::c_uint;
    pub fn packetizer_create(_dec_msg_len: ::libc::c_uint,
                             _crc: ::libc::c_int, _fec0: ::libc::c_int,
                             _fec1: ::libc::c_int) -> packetizer;
    pub fn packetizer_recreate(_p: packetizer, _dec_msg_len: ::libc::c_uint,
                               _crc: ::libc::c_int, _fec0: ::libc::c_int,
                               _fec1: ::libc::c_int) -> packetizer;
    pub fn packetizer_destroy(_p: packetizer) -> ();
    pub fn packetizer_print(_p: packetizer) -> ();
    pub fn packetizer_get_dec_msg_len(_p: packetizer) -> ::libc::c_uint;
    pub fn packetizer_get_enc_msg_len(_p: packetizer) -> ::libc::c_uint;
    pub fn packetizer_get_crc(_p: packetizer) -> crc_scheme;
    pub fn packetizer_get_fec0(_p: packetizer) -> fec_scheme;
    pub fn packetizer_get_fec1(_p: packetizer) -> fec_scheme;
    pub fn packetizer_encode(_p: packetizer, _msg: *mut ::libc::c_uchar,
                             _pkt: *mut ::libc::c_uchar) -> ();
    pub fn packetizer_decode(_p: packetizer, _pkt: *mut ::libc::c_uchar,
                             _msg: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn packetizer_decode_soft(_p: packetizer, _pkt: *mut ::libc::c_uchar,
                                  _msg: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn interleaver_create(_n: ::libc::c_uint) -> interleaver;
    pub fn interleaver_destroy(_q: interleaver) -> ();
    pub fn interleaver_print(_q: interleaver) -> ();
    pub fn interleaver_set_depth(_q: interleaver, _depth: ::libc::c_uint)
     -> ();
    pub fn interleaver_encode(_q: interleaver, _msg_dec: *mut ::libc::c_uchar,
                              _msg_enc: *mut ::libc::c_uchar) -> ();
    pub fn interleaver_encode_soft(_q: interleaver,
                                   _msg_dec: *mut ::libc::c_uchar,
                                   _msg_enc: *mut ::libc::c_uchar) -> ();
    pub fn interleaver_decode(_q: interleaver, _msg_enc: *mut ::libc::c_uchar,
                              _msg_dec: *mut ::libc::c_uchar) -> ();
    pub fn interleaver_decode_soft(_q: interleaver,
                                   _msg_enc: *mut ::libc::c_uchar,
                                   _msg_dec: *mut ::libc::c_uchar) -> ();
    pub fn fft_create_plan(_n: ::libc::c_uint, _x: *mut liquid_float_complex,
                           _y: *mut liquid_float_complex, _dir: ::libc::c_int,
                           _flags: ::libc::c_int) -> fftplan;
    pub fn fft_create_plan_r2r_1d(_n: ::libc::c_uint,
                                  _x: *mut ::libc::c_float,
                                  _y: *mut ::libc::c_float,
                                  _type: ::libc::c_int, _flags: ::libc::c_int)
     -> fftplan;
    pub fn fft_destroy_plan(_p: fftplan) -> ();
    pub fn fft_print_plan(_p: fftplan) -> ();
    pub fn fft_execute(_p: fftplan) -> ();
    pub fn fft_run(_n: ::libc::c_uint, _x: *mut liquid_float_complex,
                   _y: *mut liquid_float_complex, _dir: ::libc::c_int,
                   _flags: ::libc::c_int) -> ();
    pub fn fft_r2r_1d_run(_n: ::libc::c_uint, _x: *mut ::libc::c_float,
                          _y: *mut ::libc::c_float, _type: ::libc::c_int,
                          _flags: ::libc::c_int) -> ();
    pub fn fft_shift(_x: *mut liquid_float_complex, _n: ::libc::c_uint) -> ();
    pub fn spgramcf_create(_nfft: ::libc::c_uint,
                           _window: *mut ::libc::c_float,
                           _window_len: ::libc::c_uint) -> spgramcf;
    pub fn spgramcf_create_kaiser(_nfft: ::libc::c_uint,
                                  _window_len: ::libc::c_uint,
                                  _beta: ::libc::c_float) -> spgramcf;
    pub fn spgramcf_destroy(_q: spgramcf) -> ();
    pub fn spgramcf_reset(_q: spgramcf) -> ();
    pub fn spgramcf_push(_q: spgramcf, _x: liquid_float_complex) -> ();
    pub fn spgramcf_write(_q: spgramcf, _x: *mut liquid_float_complex,
                          _n: ::libc::c_uint) -> ();
    pub fn spgramcf_execute(_q: spgramcf, _X: *mut liquid_float_complex)
     -> ();
    pub fn spgramcf_execute_psd(_q: spgramcf, _X: *mut ::libc::c_float) -> ();
    pub fn spgramcf_accumulate_psd(_q: spgramcf,
                                   _x: *mut liquid_float_complex,
                                   _alpha: ::libc::c_float,
                                   _n: ::libc::c_uint) -> ();
    pub fn spgramcf_write_accumulation(_q: spgramcf, _x: *mut ::libc::c_float)
     -> ();
    pub fn spgramcf_estimate_psd(_q: spgramcf, _x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint,
                                 _psd: *mut ::libc::c_float) -> ();
    pub fn spgramf_create(_nfft: ::libc::c_uint,
                          _window: *mut ::libc::c_float,
                          _window_len: ::libc::c_uint) -> spgramf;
    pub fn spgramf_create_kaiser(_nfft: ::libc::c_uint,
                                 _window_len: ::libc::c_uint,
                                 _beta: ::libc::c_float) -> spgramf;
    pub fn spgramf_destroy(_q: spgramf) -> ();
    pub fn spgramf_reset(_q: spgramf) -> ();
    pub fn spgramf_push(_q: spgramf, _x: ::libc::c_float) -> ();
    pub fn spgramf_write(_q: spgramf, _x: *mut ::libc::c_float,
                         _n: ::libc::c_uint) -> ();
    pub fn spgramf_execute(_q: spgramf, _X: *mut liquid_float_complex) -> ();
    pub fn spgramf_execute_psd(_q: spgramf, _X: *mut ::libc::c_float) -> ();
    pub fn spgramf_accumulate_psd(_q: spgramf, _x: *mut ::libc::c_float,
                                  _alpha: ::libc::c_float, _n: ::libc::c_uint)
     -> ();
    pub fn spgramf_write_accumulation(_q: spgramf, _x: *mut ::libc::c_float)
     -> ();
    pub fn spgramf_estimate_psd(_q: spgramf, _x: *mut ::libc::c_float,
                                _n: ::libc::c_uint,
                                _psd: *mut ::libc::c_float) -> ();
    pub fn asgramcf_create(_nfft: ::libc::c_uint) -> asgramcf;
    pub fn asgramcf_destroy(_q: asgramcf) -> ();
    pub fn asgramcf_reset(_q: asgramcf) -> ();
    pub fn asgramcf_set_scale(_q: asgramcf, _offset: ::libc::c_float,
                              _scale: ::libc::c_float) -> ();
    pub fn asgramcf_push(_q: asgramcf, _x: liquid_float_complex) -> ();
    pub fn asgramcf_write(_q: asgramcf, _x: *mut liquid_float_complex,
                          _n: ::libc::c_uint) -> ();
    pub fn asgramcf_execute(_q: asgramcf, _ascii: *mut ::libc::c_char,
                            _peakval: *mut ::libc::c_float,
                            _peakfreq: *mut ::libc::c_float) -> ();
    pub fn asgramcf_print(_q: asgramcf) -> ();
    pub fn asgramf_create(_nfft: ::libc::c_uint) -> asgramf;
    pub fn asgramf_destroy(_q: asgramf) -> ();
    pub fn asgramf_reset(_q: asgramf) -> ();
    pub fn asgramf_set_scale(_q: asgramf, _offset: ::libc::c_float,
                             _scale: ::libc::c_float) -> ();
    pub fn asgramf_push(_q: asgramf, _x: ::libc::c_float) -> ();
    pub fn asgramf_write(_q: asgramf, _x: *mut ::libc::c_float,
                         _n: ::libc::c_uint) -> ();
    pub fn asgramf_execute(_q: asgramf, _ascii: *mut ::libc::c_char,
                           _peakval: *mut ::libc::c_float,
                           _peakfreq: *mut ::libc::c_float) -> ();
    pub fn asgramf_print(_q: asgramf) -> ();
    pub fn liquid_getopt_str2firfilt(_str: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn estimate_req_filter_len(_df: ::libc::c_float, _As: ::libc::c_float)
     -> ::libc::c_uint;
    pub fn estimate_req_filter_As(_df: ::libc::c_float, _N: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn estimate_req_filter_df(_As: ::libc::c_float, _N: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn kaiser_beta_As(_As: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_firdes_nyquist(_type: liquid_firfilt_type,
                                 _k: ::libc::c_uint, _m: ::libc::c_uint,
                                 _beta: ::libc::c_float, _dt: ::libc::c_float,
                                 _h: *mut ::libc::c_float) -> ();
    pub fn firdespm_run(_h_len: ::libc::c_uint, _num_bands: ::libc::c_uint,
                        _bands: *mut ::libc::c_float,
                        _des: *mut ::libc::c_float,
                        _weights: *mut ::libc::c_float,
                        _wtype: *mut liquid_firdespm_wtype,
                        _btype: liquid_firdespm_btype,
                        _h: *mut ::libc::c_float) -> ();
    pub fn firdespm_create(_h_len: ::libc::c_uint, _num_bands: ::libc::c_uint,
                           _bands: *mut ::libc::c_float,
                           _des: *mut ::libc::c_float,
                           _weights: *mut ::libc::c_float,
                           _wtype: *mut liquid_firdespm_wtype,
                           _btype: liquid_firdespm_btype) -> firdespm;
    pub fn firdespm_destroy(_q: firdespm) -> ();
    pub fn firdespm_print(_q: firdespm) -> ();
    pub fn firdespm_execute(_q: firdespm, _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_kaiser(_n: ::libc::c_uint, _fc: ::libc::c_float,
                                _As: ::libc::c_float, _mu: ::libc::c_float,
                                _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_doppler(_n: ::libc::c_uint, _fd: ::libc::c_float,
                                 _K: ::libc::c_float, _theta: ::libc::c_float,
                                 _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rcos(_k: ::libc::c_uint, _m: ::libc::c_uint,
                              _beta: ::libc::c_float, _dt: ::libc::c_float,
                              _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rnyquist(_type: liquid_firfilt_type,
                                  _k: ::libc::c_uint, _m: ::libc::c_uint,
                                  _beta: ::libc::c_float,
                                  _dt: ::libc::c_float,
                                  _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rrcos(_k: ::libc::c_uint, _m: ::libc::c_uint,
                               _beta: ::libc::c_float, _dt: ::libc::c_float,
                               _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rkaiser(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                 _beta: ::libc::c_float, _dt: ::libc::c_float,
                                 _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_arkaiser(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                  _beta: ::libc::c_float,
                                  _dt: ::libc::c_float,
                                  _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_hM3(_k: ::libc::c_uint, _m: ::libc::c_uint,
                             _beta: ::libc::c_float, _dt: ::libc::c_float,
                             _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_gmsktx(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                _beta: ::libc::c_float, _dt: ::libc::c_float,
                                _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_gmskrx(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                _beta: ::libc::c_float, _dt: ::libc::c_float,
                                _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_fexp(_k: ::libc::c_uint, _m: ::libc::c_uint,
                              _beta: ::libc::c_float, _dt: ::libc::c_float,
                              _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rfexp(_k: ::libc::c_uint, _m: ::libc::c_uint,
                               _beta: ::libc::c_float, _dt: ::libc::c_float,
                               _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_fsech(_k: ::libc::c_uint, _m: ::libc::c_uint,
                               _beta: ::libc::c_float, _dt: ::libc::c_float,
                               _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rfsech(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                _beta: ::libc::c_float, _dt: ::libc::c_float,
                                _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_farcsech(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                  _beta: ::libc::c_float,
                                  _dt: ::libc::c_float,
                                  _h: *mut ::libc::c_float) -> ();
    pub fn liquid_firdes_rfarcsech(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                   _beta: ::libc::c_float,
                                   _dt: ::libc::c_float,
                                   _h: *mut ::libc::c_float) -> ();
    pub fn fir_group_delay(_h: *mut ::libc::c_float, _n: ::libc::c_uint,
                           _fc: ::libc::c_float) -> ::libc::c_float;
    pub fn iir_group_delay(_b: *mut ::libc::c_float, _nb: ::libc::c_uint,
                           _a: *mut ::libc::c_float, _na: ::libc::c_uint,
                           _fc: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_filter_autocorr(_h: *mut ::libc::c_float,
                                  _h_len: ::libc::c_uint, _lag: ::libc::c_int)
     -> ::libc::c_float;
    pub fn liquid_filter_crosscorr(_h: *mut ::libc::c_float,
                                   _h_len: ::libc::c_uint,
                                   _g: *mut ::libc::c_float,
                                   _g_len: ::libc::c_uint,
                                   _lag: ::libc::c_int) -> ::libc::c_float;
    pub fn liquid_filter_isi(_h: *mut ::libc::c_float, _k: ::libc::c_uint,
                             _m: ::libc::c_uint, _rms: *mut ::libc::c_float,
                             _max: *mut ::libc::c_float) -> ();
    pub fn liquid_filter_energy(_h: *mut ::libc::c_float,
                                _h_len: ::libc::c_uint, _fc: ::libc::c_float,
                                _nfft: ::libc::c_uint) -> ::libc::c_float;
    pub fn liquid_iirdes(_ftype: liquid_iirdes_filtertype,
                         _btype: liquid_iirdes_bandtype,
                         _format: liquid_iirdes_format, _n: ::libc::c_uint,
                         _fc: ::libc::c_float, _f0: ::libc::c_float,
                         _Ap: ::libc::c_float, _As: ::libc::c_float,
                         _B: *mut ::libc::c_float, _A: *mut ::libc::c_float)
     -> ();
    pub fn butter_azpkf(_n: ::libc::c_uint, _za: *mut liquid_float_complex,
                        _pa: *mut liquid_float_complex,
                        _ka: *mut liquid_float_complex) -> ();
    pub fn cheby1_azpkf(_n: ::libc::c_uint, _ep: ::libc::c_float,
                        _z: *mut liquid_float_complex,
                        _p: *mut liquid_float_complex,
                        _k: *mut liquid_float_complex) -> ();
    pub fn cheby2_azpkf(_n: ::libc::c_uint, _es: ::libc::c_float,
                        _z: *mut liquid_float_complex,
                        _p: *mut liquid_float_complex,
                        _k: *mut liquid_float_complex) -> ();
    pub fn ellip_azpkf(_n: ::libc::c_uint, _ep: ::libc::c_float,
                       _es: ::libc::c_float, _z: *mut liquid_float_complex,
                       _p: *mut liquid_float_complex,
                       _k: *mut liquid_float_complex) -> ();
    pub fn bessel_azpkf(_n: ::libc::c_uint, _z: *mut liquid_float_complex,
                        _p: *mut liquid_float_complex,
                        _k: *mut liquid_float_complex) -> ();
    pub fn iirdes_freqprewarp(_btype: liquid_iirdes_bandtype,
                              _fc: ::libc::c_float, _f0: ::libc::c_float)
     -> ::libc::c_float;
    pub fn bilinear_zpkf(_za: *mut liquid_float_complex, _nza: ::libc::c_uint,
                         _pa: *mut liquid_float_complex, _npa: ::libc::c_uint,
                         _ka: liquid_float_complex, _m: ::libc::c_float,
                         _zd: *mut liquid_float_complex,
                         _pd: *mut liquid_float_complex,
                         _kd: *mut liquid_float_complex) -> ();
    pub fn iirdes_dzpk_lp2hp(_zd: *mut liquid_float_complex,
                             _pd: *mut liquid_float_complex,
                             _n: ::libc::c_uint,
                             _zdt: *mut liquid_float_complex,
                             _pdt: *mut liquid_float_complex) -> ();
    pub fn iirdes_dzpk_lp2bp(_zd: *mut liquid_float_complex,
                             _pd: *mut liquid_float_complex,
                             _n: ::libc::c_uint, _f0: ::libc::c_float,
                             _zdt: *mut liquid_float_complex,
                             _pdt: *mut liquid_float_complex) -> ();
    pub fn iirdes_dzpk2tff(_zd: *mut liquid_float_complex,
                           _pd: *mut liquid_float_complex, _n: ::libc::c_uint,
                           _kd: liquid_float_complex,
                           _b: *mut ::libc::c_float, _a: *mut ::libc::c_float)
     -> ();
    pub fn iirdes_dzpk2sosf(_zd: *mut liquid_float_complex,
                            _pd: *mut liquid_float_complex,
                            _n: ::libc::c_uint, _kd: liquid_float_complex,
                            _B: *mut ::libc::c_float,
                            _A: *mut ::libc::c_float) -> ();
    pub fn iirdes_pll_active_lag(_w: ::libc::c_float, _zeta: ::libc::c_float,
                                 _K: ::libc::c_float,
                                 _b: *mut ::libc::c_float,
                                 _a: *mut ::libc::c_float) -> ();
    pub fn iirdes_pll_active_PI(_w: ::libc::c_float, _zeta: ::libc::c_float,
                                _K: ::libc::c_float, _b: *mut ::libc::c_float,
                                _a: *mut ::libc::c_float) -> ();
    pub fn iirdes_isstable(_b: *mut ::libc::c_float, _a: *mut ::libc::c_float,
                           _n: ::libc::c_uint) -> ::libc::c_int;
    pub fn liquid_lpc(_x: *mut ::libc::c_float, _n: ::libc::c_uint,
                      _p: ::libc::c_uint, _a: *mut ::libc::c_float,
                      _g: *mut ::libc::c_float) -> ();
    pub fn liquid_levinson(_r: *mut ::libc::c_float, _p: ::libc::c_uint,
                           _a: *mut ::libc::c_float, _e: *mut ::libc::c_float)
     -> ();
    pub fn autocorr_cccf_create(_window_size: ::libc::c_uint,
                                _delay: ::libc::c_uint) -> autocorr_cccf;
    pub fn autocorr_cccf_destroy(_q: autocorr_cccf) -> ();
    pub fn autocorr_cccf_reset(_q: autocorr_cccf) -> ();
    pub fn autocorr_cccf_print(_q: autocorr_cccf) -> ();
    pub fn autocorr_cccf_push(_q: autocorr_cccf, _x: liquid_float_complex)
     -> ();
    pub fn autocorr_cccf_execute(_q: autocorr_cccf,
                                 _rxx: *mut liquid_float_complex) -> ();
    pub fn autocorr_cccf_execute_block(_q: autocorr_cccf,
                                       _x: *mut liquid_float_complex,
                                       _n: ::libc::c_uint,
                                       _rxx: *mut liquid_float_complex) -> ();
    pub fn autocorr_cccf_get_energy(_q: autocorr_cccf) -> ::libc::c_float;
    pub fn autocorr_rrrf_create(_window_size: ::libc::c_uint,
                                _delay: ::libc::c_uint) -> autocorr_rrrf;
    pub fn autocorr_rrrf_destroy(_q: autocorr_rrrf) -> ();
    pub fn autocorr_rrrf_reset(_q: autocorr_rrrf) -> ();
    pub fn autocorr_rrrf_print(_q: autocorr_rrrf) -> ();
    pub fn autocorr_rrrf_push(_q: autocorr_rrrf, _x: ::libc::c_float) -> ();
    pub fn autocorr_rrrf_execute(_q: autocorr_rrrf,
                                 _rxx: *mut ::libc::c_float) -> ();
    pub fn autocorr_rrrf_execute_block(_q: autocorr_rrrf,
                                       _x: *mut ::libc::c_float,
                                       _n: ::libc::c_uint,
                                       _rxx: *mut ::libc::c_float) -> ();
    pub fn autocorr_rrrf_get_energy(_q: autocorr_rrrf) -> ::libc::c_float;
    pub fn firfilt_rrrf_create(_h: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> firfilt_rrrf;
    pub fn firfilt_rrrf_create_kaiser(_n: ::libc::c_uint,
                                      _fc: ::libc::c_float,
                                      _As: ::libc::c_float,
                                      _mu: ::libc::c_float) -> firfilt_rrrf;
    pub fn firfilt_rrrf_create_rnyquist(_type: ::libc::c_int,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float,
                                        _mu: ::libc::c_float) -> firfilt_rrrf;
    pub fn firfilt_rrrf_recreate(_q: firfilt_rrrf, _h: *mut ::libc::c_float,
                                 _n: ::libc::c_uint) -> firfilt_rrrf;
    pub fn firfilt_rrrf_destroy(_q: firfilt_rrrf) -> ();
    pub fn firfilt_rrrf_reset(_q: firfilt_rrrf) -> ();
    pub fn firfilt_rrrf_print(_q: firfilt_rrrf) -> ();
    pub fn firfilt_rrrf_set_scale(_q: firfilt_rrrf, _scale: ::libc::c_float)
     -> ();
    pub fn firfilt_rrrf_push(_q: firfilt_rrrf, _x: ::libc::c_float) -> ();
    pub fn firfilt_rrrf_execute(_q: firfilt_rrrf, _y: *mut ::libc::c_float)
     -> ();
    pub fn firfilt_rrrf_execute_block(_q: firfilt_rrrf,
                                      _x: *mut ::libc::c_float,
                                      _n: ::libc::c_uint,
                                      _y: *mut ::libc::c_float) -> ();
    pub fn firfilt_rrrf_get_length(_q: firfilt_rrrf) -> ::libc::c_uint;
    pub fn firfilt_rrrf_freqresponse(_q: firfilt_rrrf, _fc: ::libc::c_float,
                                     _H: *mut liquid_float_complex) -> ();
    pub fn firfilt_rrrf_groupdelay(_q: firfilt_rrrf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn firfilt_crcf_create(_h: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> firfilt_crcf;
    pub fn firfilt_crcf_create_kaiser(_n: ::libc::c_uint,
                                      _fc: ::libc::c_float,
                                      _As: ::libc::c_float,
                                      _mu: ::libc::c_float) -> firfilt_crcf;
    pub fn firfilt_crcf_create_rnyquist(_type: ::libc::c_int,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float,
                                        _mu: ::libc::c_float) -> firfilt_crcf;
    pub fn firfilt_crcf_recreate(_q: firfilt_crcf, _h: *mut ::libc::c_float,
                                 _n: ::libc::c_uint) -> firfilt_crcf;
    pub fn firfilt_crcf_destroy(_q: firfilt_crcf) -> ();
    pub fn firfilt_crcf_reset(_q: firfilt_crcf) -> ();
    pub fn firfilt_crcf_print(_q: firfilt_crcf) -> ();
    pub fn firfilt_crcf_set_scale(_q: firfilt_crcf, _scale: ::libc::c_float)
     -> ();
    pub fn firfilt_crcf_push(_q: firfilt_crcf, _x: liquid_float_complex)
     -> ();
    pub fn firfilt_crcf_execute(_q: firfilt_crcf,
                                _y: *mut liquid_float_complex) -> ();
    pub fn firfilt_crcf_execute_block(_q: firfilt_crcf,
                                      _x: *mut liquid_float_complex,
                                      _n: ::libc::c_uint,
                                      _y: *mut liquid_float_complex) -> ();
    pub fn firfilt_crcf_get_length(_q: firfilt_crcf) -> ::libc::c_uint;
    pub fn firfilt_crcf_freqresponse(_q: firfilt_crcf, _fc: ::libc::c_float,
                                     _H: *mut liquid_float_complex) -> ();
    pub fn firfilt_crcf_groupdelay(_q: firfilt_crcf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn firfilt_cccf_create(_h: *mut liquid_float_complex,
                               _n: ::libc::c_uint) -> firfilt_cccf;
    pub fn firfilt_cccf_create_kaiser(_n: ::libc::c_uint,
                                      _fc: ::libc::c_float,
                                      _As: ::libc::c_float,
                                      _mu: ::libc::c_float) -> firfilt_cccf;
    pub fn firfilt_cccf_create_rnyquist(_type: ::libc::c_int,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float,
                                        _mu: ::libc::c_float) -> firfilt_cccf;
    pub fn firfilt_cccf_recreate(_q: firfilt_cccf,
                                 _h: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> firfilt_cccf;
    pub fn firfilt_cccf_destroy(_q: firfilt_cccf) -> ();
    pub fn firfilt_cccf_reset(_q: firfilt_cccf) -> ();
    pub fn firfilt_cccf_print(_q: firfilt_cccf) -> ();
    pub fn firfilt_cccf_set_scale(_q: firfilt_cccf,
                                  _scale: liquid_float_complex) -> ();
    pub fn firfilt_cccf_push(_q: firfilt_cccf, _x: liquid_float_complex)
     -> ();
    pub fn firfilt_cccf_execute(_q: firfilt_cccf,
                                _y: *mut liquid_float_complex) -> ();
    pub fn firfilt_cccf_execute_block(_q: firfilt_cccf,
                                      _x: *mut liquid_float_complex,
                                      _n: ::libc::c_uint,
                                      _y: *mut liquid_float_complex) -> ();
    pub fn firfilt_cccf_get_length(_q: firfilt_cccf) -> ::libc::c_uint;
    pub fn firfilt_cccf_freqresponse(_q: firfilt_cccf, _fc: ::libc::c_float,
                                     _H: *mut liquid_float_complex) -> ();
    pub fn firfilt_cccf_groupdelay(_q: firfilt_cccf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn firhilbf_create(_m: ::libc::c_uint, _As: ::libc::c_float)
     -> firhilbf;
    pub fn firhilbf_destroy(_q: firhilbf) -> ();
    pub fn firhilbf_print(_q: firhilbf) -> ();
    pub fn firhilbf_reset(_q: firhilbf) -> ();
    pub fn firhilbf_r2c_execute(_q: firhilbf, _x: ::libc::c_float,
                                _y: *mut liquid_float_complex) -> ();
    pub fn firhilbf_c2r_execute(_q: firhilbf, _x: liquid_float_complex,
                                _y: *mut ::libc::c_float) -> ();
    pub fn firhilbf_decim_execute(_q: firhilbf, _x: *mut ::libc::c_float,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn firhilbf_decim_execute_block(_q: firhilbf,
                                        _x: *mut ::libc::c_float,
                                        _n: ::libc::c_uint,
                                        _y: *mut liquid_float_complex) -> ();
    pub fn firhilbf_interp_execute(_q: firhilbf, _x: liquid_float_complex,
                                   _y: *mut ::libc::c_float) -> ();
    pub fn firhilbf_interp_execute_block(_q: firhilbf,
                                         _x: *mut liquid_float_complex,
                                         _n: ::libc::c_uint,
                                         _y: *mut ::libc::c_float) -> ();
    pub fn fftfilt_rrrf_create(_h: *mut ::libc::c_float,
                               _h_len: ::libc::c_uint, _n: ::libc::c_uint)
     -> fftfilt_rrrf;
    pub fn fftfilt_rrrf_destroy(_q: fftfilt_rrrf) -> ();
    pub fn fftfilt_rrrf_reset(_q: fftfilt_rrrf) -> ();
    pub fn fftfilt_rrrf_print(_q: fftfilt_rrrf) -> ();
    pub fn fftfilt_rrrf_set_scale(_q: fftfilt_rrrf, _scale: ::libc::c_float)
     -> ();
    pub fn fftfilt_rrrf_execute(_q: fftfilt_rrrf, _x: *mut ::libc::c_float,
                                _y: *mut ::libc::c_float) -> ();
    pub fn fftfilt_rrrf_get_length(_q: fftfilt_rrrf) -> ::libc::c_uint;
    pub fn fftfilt_crcf_create(_h: *mut ::libc::c_float,
                               _h_len: ::libc::c_uint, _n: ::libc::c_uint)
     -> fftfilt_crcf;
    pub fn fftfilt_crcf_destroy(_q: fftfilt_crcf) -> ();
    pub fn fftfilt_crcf_reset(_q: fftfilt_crcf) -> ();
    pub fn fftfilt_crcf_print(_q: fftfilt_crcf) -> ();
    pub fn fftfilt_crcf_set_scale(_q: fftfilt_crcf, _scale: ::libc::c_float)
     -> ();
    pub fn fftfilt_crcf_execute(_q: fftfilt_crcf,
                                _x: *mut liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn fftfilt_crcf_get_length(_q: fftfilt_crcf) -> ::libc::c_uint;
    pub fn fftfilt_cccf_create(_h: *mut liquid_float_complex,
                               _h_len: ::libc::c_uint, _n: ::libc::c_uint)
     -> fftfilt_cccf;
    pub fn fftfilt_cccf_destroy(_q: fftfilt_cccf) -> ();
    pub fn fftfilt_cccf_reset(_q: fftfilt_cccf) -> ();
    pub fn fftfilt_cccf_print(_q: fftfilt_cccf) -> ();
    pub fn fftfilt_cccf_set_scale(_q: fftfilt_cccf,
                                  _scale: liquid_float_complex) -> ();
    pub fn fftfilt_cccf_execute(_q: fftfilt_cccf,
                                _x: *mut liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn fftfilt_cccf_get_length(_q: fftfilt_cccf) -> ::libc::c_uint;
    pub fn iirfilt_rrrf_create(_b: *mut ::libc::c_float, _nb: ::libc::c_uint,
                               _a: *mut ::libc::c_float, _na: ::libc::c_uint)
     -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_sos(_B: *mut ::libc::c_float,
                                   _A: *mut ::libc::c_float,
                                   _nsos: ::libc::c_uint) -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_prototype(_ftype: liquid_iirdes_filtertype,
                                         _btype: liquid_iirdes_bandtype,
                                         _format: liquid_iirdes_format,
                                         _order: ::libc::c_uint,
                                         _fc: ::libc::c_float,
                                         _f0: ::libc::c_float,
                                         _Ap: ::libc::c_float,
                                         _As: ::libc::c_float)
     -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_lowpass(_order: ::libc::c_uint,
                                       _fc: ::libc::c_float) -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_integrator() -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_differentiator() -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_dc_blocker(_alpha: ::libc::c_float)
     -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_create_pll(_w: ::libc::c_float,
                                   _zeta: ::libc::c_float,
                                   _K: ::libc::c_float) -> iirfilt_rrrf;
    pub fn iirfilt_rrrf_destroy(_q: iirfilt_rrrf) -> ();
    pub fn iirfilt_rrrf_print(_q: iirfilt_rrrf) -> ();
    pub fn iirfilt_rrrf_reset(_q: iirfilt_rrrf) -> ();
    pub fn iirfilt_rrrf_execute(_q: iirfilt_rrrf, _x: ::libc::c_float,
                                _y: *mut ::libc::c_float) -> ();
    pub fn iirfilt_rrrf_execute_block(_q: iirfilt_rrrf,
                                      _x: *mut ::libc::c_float,
                                      _n: ::libc::c_uint,
                                      _y: *mut ::libc::c_float) -> ();
    pub fn iirfilt_rrrf_get_length(_q: iirfilt_rrrf) -> ::libc::c_uint;
    pub fn iirfilt_rrrf_freqresponse(_q: iirfilt_rrrf, _fc: ::libc::c_float,
                                     _H: *mut liquid_float_complex) -> ();
    pub fn iirfilt_rrrf_groupdelay(_q: iirfilt_rrrf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn iirfilt_crcf_create(_b: *mut ::libc::c_float, _nb: ::libc::c_uint,
                               _a: *mut ::libc::c_float, _na: ::libc::c_uint)
     -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_sos(_B: *mut ::libc::c_float,
                                   _A: *mut ::libc::c_float,
                                   _nsos: ::libc::c_uint) -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_prototype(_ftype: liquid_iirdes_filtertype,
                                         _btype: liquid_iirdes_bandtype,
                                         _format: liquid_iirdes_format,
                                         _order: ::libc::c_uint,
                                         _fc: ::libc::c_float,
                                         _f0: ::libc::c_float,
                                         _Ap: ::libc::c_float,
                                         _As: ::libc::c_float)
     -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_lowpass(_order: ::libc::c_uint,
                                       _fc: ::libc::c_float) -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_integrator() -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_differentiator() -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_dc_blocker(_alpha: ::libc::c_float)
     -> iirfilt_crcf;
    pub fn iirfilt_crcf_create_pll(_w: ::libc::c_float,
                                   _zeta: ::libc::c_float,
                                   _K: ::libc::c_float) -> iirfilt_crcf;
    pub fn iirfilt_crcf_destroy(_q: iirfilt_crcf) -> ();
    pub fn iirfilt_crcf_print(_q: iirfilt_crcf) -> ();
    pub fn iirfilt_crcf_reset(_q: iirfilt_crcf) -> ();
    pub fn iirfilt_crcf_execute(_q: iirfilt_crcf, _x: liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn iirfilt_crcf_execute_block(_q: iirfilt_crcf,
                                      _x: *mut liquid_float_complex,
                                      _n: ::libc::c_uint,
                                      _y: *mut liquid_float_complex) -> ();
    pub fn iirfilt_crcf_get_length(_q: iirfilt_crcf) -> ::libc::c_uint;
    pub fn iirfilt_crcf_freqresponse(_q: iirfilt_crcf, _fc: ::libc::c_float,
                                     _H: *mut liquid_float_complex) -> ();
    pub fn iirfilt_crcf_groupdelay(_q: iirfilt_crcf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn iirfilt_cccf_create(_b: *mut liquid_float_complex,
                               _nb: ::libc::c_uint,
                               _a: *mut liquid_float_complex,
                               _na: ::libc::c_uint) -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_sos(_B: *mut liquid_float_complex,
                                   _A: *mut liquid_float_complex,
                                   _nsos: ::libc::c_uint) -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_prototype(_ftype: liquid_iirdes_filtertype,
                                         _btype: liquid_iirdes_bandtype,
                                         _format: liquid_iirdes_format,
                                         _order: ::libc::c_uint,
                                         _fc: ::libc::c_float,
                                         _f0: ::libc::c_float,
                                         _Ap: ::libc::c_float,
                                         _As: ::libc::c_float)
     -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_lowpass(_order: ::libc::c_uint,
                                       _fc: ::libc::c_float) -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_integrator() -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_differentiator() -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_dc_blocker(_alpha: ::libc::c_float)
     -> iirfilt_cccf;
    pub fn iirfilt_cccf_create_pll(_w: ::libc::c_float,
                                   _zeta: ::libc::c_float,
                                   _K: ::libc::c_float) -> iirfilt_cccf;
    pub fn iirfilt_cccf_destroy(_q: iirfilt_cccf) -> ();
    pub fn iirfilt_cccf_print(_q: iirfilt_cccf) -> ();
    pub fn iirfilt_cccf_reset(_q: iirfilt_cccf) -> ();
    pub fn iirfilt_cccf_execute(_q: iirfilt_cccf, _x: liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn iirfilt_cccf_execute_block(_q: iirfilt_cccf,
                                      _x: *mut liquid_float_complex,
                                      _n: ::libc::c_uint,
                                      _y: *mut liquid_float_complex) -> ();
    pub fn iirfilt_cccf_get_length(_q: iirfilt_cccf) -> ::libc::c_uint;
    pub fn iirfilt_cccf_freqresponse(_q: iirfilt_cccf, _fc: ::libc::c_float,
                                     _H: *mut liquid_float_complex) -> ();
    pub fn iirfilt_cccf_groupdelay(_q: iirfilt_cccf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn firpfb_rrrf_create(_M: ::libc::c_uint, _h: *mut ::libc::c_float,
                              _h_len: ::libc::c_uint) -> firpfb_rrrf;
    pub fn firpfb_rrrf_create_rnyquist(_type: ::libc::c_int,
                                       _npfb: ::libc::c_uint,
                                       _k: ::libc::c_uint, _m: ::libc::c_uint,
                                       _beta: ::libc::c_float) -> firpfb_rrrf;
    pub fn firpfb_rrrf_create_drnyquist(_type: ::libc::c_int,
                                        _npfb: ::libc::c_uint,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float)
     -> firpfb_rrrf;
    pub fn firpfb_rrrf_recreate(_q: firpfb_rrrf, _M: ::libc::c_uint,
                                _h: *mut ::libc::c_float,
                                _h_len: ::libc::c_uint) -> firpfb_rrrf;
    pub fn firpfb_rrrf_destroy(_q: firpfb_rrrf) -> ();
    pub fn firpfb_rrrf_print(_q: firpfb_rrrf) -> ();
    pub fn firpfb_rrrf_set_scale(_q: firpfb_rrrf, _g: ::libc::c_float) -> ();
    pub fn firpfb_rrrf_reset(_q: firpfb_rrrf) -> ();
    pub fn firpfb_rrrf_push(_q: firpfb_rrrf, _x: ::libc::c_float) -> ();
    pub fn firpfb_rrrf_execute(_q: firpfb_rrrf, _i: ::libc::c_uint,
                               _y: *mut ::libc::c_float) -> ();
    pub fn firpfb_crcf_create(_M: ::libc::c_uint, _h: *mut ::libc::c_float,
                              _h_len: ::libc::c_uint) -> firpfb_crcf;
    pub fn firpfb_crcf_create_rnyquist(_type: ::libc::c_int,
                                       _npfb: ::libc::c_uint,
                                       _k: ::libc::c_uint, _m: ::libc::c_uint,
                                       _beta: ::libc::c_float) -> firpfb_crcf;
    pub fn firpfb_crcf_create_drnyquist(_type: ::libc::c_int,
                                        _npfb: ::libc::c_uint,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float)
     -> firpfb_crcf;
    pub fn firpfb_crcf_recreate(_q: firpfb_crcf, _M: ::libc::c_uint,
                                _h: *mut ::libc::c_float,
                                _h_len: ::libc::c_uint) -> firpfb_crcf;
    pub fn firpfb_crcf_destroy(_q: firpfb_crcf) -> ();
    pub fn firpfb_crcf_print(_q: firpfb_crcf) -> ();
    pub fn firpfb_crcf_set_scale(_q: firpfb_crcf, _g: ::libc::c_float) -> ();
    pub fn firpfb_crcf_reset(_q: firpfb_crcf) -> ();
    pub fn firpfb_crcf_push(_q: firpfb_crcf, _x: liquid_float_complex) -> ();
    pub fn firpfb_crcf_execute(_q: firpfb_crcf, _i: ::libc::c_uint,
                               _y: *mut liquid_float_complex) -> ();
    pub fn firpfb_cccf_create(_M: ::libc::c_uint,
                              _h: *mut liquid_float_complex,
                              _h_len: ::libc::c_uint) -> firpfb_cccf;
    pub fn firpfb_cccf_create_rnyquist(_type: ::libc::c_int,
                                       _npfb: ::libc::c_uint,
                                       _k: ::libc::c_uint, _m: ::libc::c_uint,
                                       _beta: ::libc::c_float) -> firpfb_cccf;
    pub fn firpfb_cccf_create_drnyquist(_type: ::libc::c_int,
                                        _npfb: ::libc::c_uint,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float)
     -> firpfb_cccf;
    pub fn firpfb_cccf_recreate(_q: firpfb_cccf, _M: ::libc::c_uint,
                                _h: *mut liquid_float_complex,
                                _h_len: ::libc::c_uint) -> firpfb_cccf;
    pub fn firpfb_cccf_destroy(_q: firpfb_cccf) -> ();
    pub fn firpfb_cccf_print(_q: firpfb_cccf) -> ();
    pub fn firpfb_cccf_set_scale(_q: firpfb_cccf, _g: liquid_float_complex)
     -> ();
    pub fn firpfb_cccf_reset(_q: firpfb_cccf) -> ();
    pub fn firpfb_cccf_push(_q: firpfb_cccf, _x: liquid_float_complex) -> ();
    pub fn firpfb_cccf_execute(_q: firpfb_cccf, _i: ::libc::c_uint,
                               _y: *mut liquid_float_complex) -> ();
    pub fn firinterp_rrrf_create(_M: ::libc::c_uint, _h: *mut ::libc::c_float,
                                 _h_len: ::libc::c_uint) -> firinterp_rrrf;
    pub fn firinterp_rrrf_create_prototype(_M: ::libc::c_uint,
                                           _m: ::libc::c_uint,
                                           _As: ::libc::c_float)
     -> firinterp_rrrf;
    pub fn firinterp_rrrf_create_nyquist(_type: ::libc::c_int,
                                         _k: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _dt: ::libc::c_float)
     -> firinterp_rrrf;
    pub fn firinterp_rrrf_create_rnyquist(_type: ::libc::c_int,
                                          _k: ::libc::c_uint,
                                          _m: ::libc::c_uint,
                                          _beta: ::libc::c_float,
                                          _dt: ::libc::c_float)
     -> firinterp_rrrf;
    pub fn firinterp_rrrf_destroy(_q: firinterp_rrrf) -> ();
    pub fn firinterp_rrrf_print(_q: firinterp_rrrf) -> ();
    pub fn firinterp_rrrf_reset(_q: firinterp_rrrf) -> ();
    pub fn firinterp_rrrf_execute(_q: firinterp_rrrf, _x: ::libc::c_float,
                                  _y: *mut ::libc::c_float) -> ();
    pub fn firinterp_rrrf_execute_block(_q: firinterp_rrrf,
                                        _x: *mut ::libc::c_float,
                                        _n: ::libc::c_uint,
                                        _y: *mut ::libc::c_float) -> ();
    pub fn firinterp_crcf_create(_M: ::libc::c_uint, _h: *mut ::libc::c_float,
                                 _h_len: ::libc::c_uint) -> firinterp_crcf;
    pub fn firinterp_crcf_create_prototype(_M: ::libc::c_uint,
                                           _m: ::libc::c_uint,
                                           _As: ::libc::c_float)
     -> firinterp_crcf;
    pub fn firinterp_crcf_create_nyquist(_type: ::libc::c_int,
                                         _k: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _dt: ::libc::c_float)
     -> firinterp_crcf;
    pub fn firinterp_crcf_create_rnyquist(_type: ::libc::c_int,
                                          _k: ::libc::c_uint,
                                          _m: ::libc::c_uint,
                                          _beta: ::libc::c_float,
                                          _dt: ::libc::c_float)
     -> firinterp_crcf;
    pub fn firinterp_crcf_destroy(_q: firinterp_crcf) -> ();
    pub fn firinterp_crcf_print(_q: firinterp_crcf) -> ();
    pub fn firinterp_crcf_reset(_q: firinterp_crcf) -> ();
    pub fn firinterp_crcf_execute(_q: firinterp_crcf,
                                  _x: liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn firinterp_crcf_execute_block(_q: firinterp_crcf,
                                        _x: *mut liquid_float_complex,
                                        _n: ::libc::c_uint,
                                        _y: *mut liquid_float_complex) -> ();
    pub fn firinterp_cccf_create(_M: ::libc::c_uint,
                                 _h: *mut liquid_float_complex,
                                 _h_len: ::libc::c_uint) -> firinterp_cccf;
    pub fn firinterp_cccf_create_prototype(_M: ::libc::c_uint,
                                           _m: ::libc::c_uint,
                                           _As: ::libc::c_float)
     -> firinterp_cccf;
    pub fn firinterp_cccf_create_nyquist(_type: ::libc::c_int,
                                         _k: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _dt: ::libc::c_float)
     -> firinterp_cccf;
    pub fn firinterp_cccf_create_rnyquist(_type: ::libc::c_int,
                                          _k: ::libc::c_uint,
                                          _m: ::libc::c_uint,
                                          _beta: ::libc::c_float,
                                          _dt: ::libc::c_float)
     -> firinterp_cccf;
    pub fn firinterp_cccf_destroy(_q: firinterp_cccf) -> ();
    pub fn firinterp_cccf_print(_q: firinterp_cccf) -> ();
    pub fn firinterp_cccf_reset(_q: firinterp_cccf) -> ();
    pub fn firinterp_cccf_execute(_q: firinterp_cccf,
                                  _x: liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn firinterp_cccf_execute_block(_q: firinterp_cccf,
                                        _x: *mut liquid_float_complex,
                                        _n: ::libc::c_uint,
                                        _y: *mut liquid_float_complex) -> ();
    pub fn iirinterp_rrrf_create(_M: ::libc::c_uint, _b: *mut ::libc::c_float,
                                 _nb: ::libc::c_uint,
                                 _a: *mut ::libc::c_float,
                                 _na: ::libc::c_uint) -> iirinterp_rrrf;
    pub fn iirinterp_rrrf_create_default(_M: ::libc::c_uint,
                                         _order: ::libc::c_uint)
     -> iirinterp_rrrf;
    pub fn iirinterp_rrrf_create_prototype(_M: ::libc::c_uint,
                                           _ftype: liquid_iirdes_filtertype,
                                           _btype: liquid_iirdes_bandtype,
                                           _format: liquid_iirdes_format,
                                           _order: ::libc::c_uint,
                                           _fc: ::libc::c_float,
                                           _f0: ::libc::c_float,
                                           _Ap: ::libc::c_float,
                                           _As: ::libc::c_float)
     -> iirinterp_rrrf;
    pub fn iirinterp_rrrf_destroy(_q: iirinterp_rrrf) -> ();
    pub fn iirinterp_rrrf_print(_q: iirinterp_rrrf) -> ();
    pub fn iirinterp_rrrf_reset(_q: iirinterp_rrrf) -> ();
    pub fn iirinterp_rrrf_execute(_q: iirinterp_rrrf, _x: ::libc::c_float,
                                  _y: *mut ::libc::c_float) -> ();
    pub fn iirinterp_rrrf_execute_block(_q: iirinterp_rrrf,
                                        _x: *mut ::libc::c_float,
                                        _n: ::libc::c_uint,
                                        _y: *mut ::libc::c_float) -> ();
    pub fn iirinterp_rrrf_groupdelay(_q: iirinterp_rrrf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn iirinterp_crcf_create(_M: ::libc::c_uint, _b: *mut ::libc::c_float,
                                 _nb: ::libc::c_uint,
                                 _a: *mut ::libc::c_float,
                                 _na: ::libc::c_uint) -> iirinterp_crcf;
    pub fn iirinterp_crcf_create_default(_M: ::libc::c_uint,
                                         _order: ::libc::c_uint)
     -> iirinterp_crcf;
    pub fn iirinterp_crcf_create_prototype(_M: ::libc::c_uint,
                                           _ftype: liquid_iirdes_filtertype,
                                           _btype: liquid_iirdes_bandtype,
                                           _format: liquid_iirdes_format,
                                           _order: ::libc::c_uint,
                                           _fc: ::libc::c_float,
                                           _f0: ::libc::c_float,
                                           _Ap: ::libc::c_float,
                                           _As: ::libc::c_float)
     -> iirinterp_crcf;
    pub fn iirinterp_crcf_destroy(_q: iirinterp_crcf) -> ();
    pub fn iirinterp_crcf_print(_q: iirinterp_crcf) -> ();
    pub fn iirinterp_crcf_reset(_q: iirinterp_crcf) -> ();
    pub fn iirinterp_crcf_execute(_q: iirinterp_crcf,
                                  _x: liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn iirinterp_crcf_execute_block(_q: iirinterp_crcf,
                                        _x: *mut liquid_float_complex,
                                        _n: ::libc::c_uint,
                                        _y: *mut liquid_float_complex) -> ();
    pub fn iirinterp_crcf_groupdelay(_q: iirinterp_crcf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn iirinterp_cccf_create(_M: ::libc::c_uint,
                                 _b: *mut liquid_float_complex,
                                 _nb: ::libc::c_uint,
                                 _a: *mut liquid_float_complex,
                                 _na: ::libc::c_uint) -> iirinterp_cccf;
    pub fn iirinterp_cccf_create_default(_M: ::libc::c_uint,
                                         _order: ::libc::c_uint)
     -> iirinterp_cccf;
    pub fn iirinterp_cccf_create_prototype(_M: ::libc::c_uint,
                                           _ftype: liquid_iirdes_filtertype,
                                           _btype: liquid_iirdes_bandtype,
                                           _format: liquid_iirdes_format,
                                           _order: ::libc::c_uint,
                                           _fc: ::libc::c_float,
                                           _f0: ::libc::c_float,
                                           _Ap: ::libc::c_float,
                                           _As: ::libc::c_float)
     -> iirinterp_cccf;
    pub fn iirinterp_cccf_destroy(_q: iirinterp_cccf) -> ();
    pub fn iirinterp_cccf_print(_q: iirinterp_cccf) -> ();
    pub fn iirinterp_cccf_reset(_q: iirinterp_cccf) -> ();
    pub fn iirinterp_cccf_execute(_q: iirinterp_cccf,
                                  _x: liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn iirinterp_cccf_execute_block(_q: iirinterp_cccf,
                                        _x: *mut liquid_float_complex,
                                        _n: ::libc::c_uint,
                                        _y: *mut liquid_float_complex) -> ();
    pub fn iirinterp_cccf_groupdelay(_q: iirinterp_cccf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn firdecim_rrrf_create(_M: ::libc::c_uint, _h: *mut ::libc::c_float,
                                _h_len: ::libc::c_uint) -> firdecim_rrrf;
    pub fn firdecim_rrrf_create_prototype(_M: ::libc::c_uint,
                                          _m: ::libc::c_uint,
                                          _As: ::libc::c_float)
     -> firdecim_rrrf;
    pub fn firdecim_rrrf_create_rnyquist(_type: ::libc::c_int,
                                         _M: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _dt: ::libc::c_float)
     -> firdecim_rrrf;
    pub fn firdecim_rrrf_destroy(_q: firdecim_rrrf) -> ();
    pub fn firdecim_rrrf_print(_q: firdecim_rrrf) -> ();
    pub fn firdecim_rrrf_clear(_q: firdecim_rrrf) -> ();
    pub fn firdecim_rrrf_execute(_q: firdecim_rrrf, _x: *mut ::libc::c_float,
                                 _y: *mut ::libc::c_float) -> ();
    pub fn firdecim_rrrf_execute_block(_q: firdecim_rrrf,
                                       _x: *mut ::libc::c_float,
                                       _n: ::libc::c_uint,
                                       _y: *mut ::libc::c_float) -> ();
    pub fn firdecim_crcf_create(_M: ::libc::c_uint, _h: *mut ::libc::c_float,
                                _h_len: ::libc::c_uint) -> firdecim_crcf;
    pub fn firdecim_crcf_create_prototype(_M: ::libc::c_uint,
                                          _m: ::libc::c_uint,
                                          _As: ::libc::c_float)
     -> firdecim_crcf;
    pub fn firdecim_crcf_create_rnyquist(_type: ::libc::c_int,
                                         _M: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _dt: ::libc::c_float)
     -> firdecim_crcf;
    pub fn firdecim_crcf_destroy(_q: firdecim_crcf) -> ();
    pub fn firdecim_crcf_print(_q: firdecim_crcf) -> ();
    pub fn firdecim_crcf_clear(_q: firdecim_crcf) -> ();
    pub fn firdecim_crcf_execute(_q: firdecim_crcf,
                                 _x: *mut liquid_float_complex,
                                 _y: *mut liquid_float_complex) -> ();
    pub fn firdecim_crcf_execute_block(_q: firdecim_crcf,
                                       _x: *mut liquid_float_complex,
                                       _n: ::libc::c_uint,
                                       _y: *mut liquid_float_complex) -> ();
    pub fn firdecim_cccf_create(_M: ::libc::c_uint,
                                _h: *mut liquid_float_complex,
                                _h_len: ::libc::c_uint) -> firdecim_cccf;
    pub fn firdecim_cccf_create_prototype(_M: ::libc::c_uint,
                                          _m: ::libc::c_uint,
                                          _As: ::libc::c_float)
     -> firdecim_cccf;
    pub fn firdecim_cccf_create_rnyquist(_type: ::libc::c_int,
                                         _M: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _dt: ::libc::c_float)
     -> firdecim_cccf;
    pub fn firdecim_cccf_destroy(_q: firdecim_cccf) -> ();
    pub fn firdecim_cccf_print(_q: firdecim_cccf) -> ();
    pub fn firdecim_cccf_clear(_q: firdecim_cccf) -> ();
    pub fn firdecim_cccf_execute(_q: firdecim_cccf,
                                 _x: *mut liquid_float_complex,
                                 _y: *mut liquid_float_complex) -> ();
    pub fn firdecim_cccf_execute_block(_q: firdecim_cccf,
                                       _x: *mut liquid_float_complex,
                                       _n: ::libc::c_uint,
                                       _y: *mut liquid_float_complex) -> ();
    pub fn iirdecim_rrrf_create(_M: ::libc::c_uint, _b: *mut ::libc::c_float,
                                _nb: ::libc::c_uint, _a: *mut ::libc::c_float,
                                _na: ::libc::c_uint) -> iirdecim_rrrf;
    pub fn iirdecim_rrrf_create_default(_M: ::libc::c_uint,
                                        _order: ::libc::c_uint)
     -> iirdecim_rrrf;
    pub fn iirdecim_rrrf_create_prototype(_M: ::libc::c_uint,
                                          _ftype: liquid_iirdes_filtertype,
                                          _btype: liquid_iirdes_bandtype,
                                          _format: liquid_iirdes_format,
                                          _order: ::libc::c_uint,
                                          _fc: ::libc::c_float,
                                          _f0: ::libc::c_float,
                                          _Ap: ::libc::c_float,
                                          _As: ::libc::c_float)
     -> iirdecim_rrrf;
    pub fn iirdecim_rrrf_destroy(_q: iirdecim_rrrf) -> ();
    pub fn iirdecim_rrrf_print(_q: iirdecim_rrrf) -> ();
    pub fn iirdecim_rrrf_reset(_q: iirdecim_rrrf) -> ();
    pub fn iirdecim_rrrf_execute(_q: iirdecim_rrrf, _x: *mut ::libc::c_float,
                                 _y: *mut ::libc::c_float) -> ();
    pub fn iirdecim_rrrf_execute_block(_q: iirdecim_rrrf,
                                       _x: *mut ::libc::c_float,
                                       _n: ::libc::c_uint,
                                       _y: *mut ::libc::c_float) -> ();
    pub fn iirdecim_rrrf_groupdelay(_q: iirdecim_rrrf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn iirdecim_crcf_create(_M: ::libc::c_uint, _b: *mut ::libc::c_float,
                                _nb: ::libc::c_uint, _a: *mut ::libc::c_float,
                                _na: ::libc::c_uint) -> iirdecim_crcf;
    pub fn iirdecim_crcf_create_default(_M: ::libc::c_uint,
                                        _order: ::libc::c_uint)
     -> iirdecim_crcf;
    pub fn iirdecim_crcf_create_prototype(_M: ::libc::c_uint,
                                          _ftype: liquid_iirdes_filtertype,
                                          _btype: liquid_iirdes_bandtype,
                                          _format: liquid_iirdes_format,
                                          _order: ::libc::c_uint,
                                          _fc: ::libc::c_float,
                                          _f0: ::libc::c_float,
                                          _Ap: ::libc::c_float,
                                          _As: ::libc::c_float)
     -> iirdecim_crcf;
    pub fn iirdecim_crcf_destroy(_q: iirdecim_crcf) -> ();
    pub fn iirdecim_crcf_print(_q: iirdecim_crcf) -> ();
    pub fn iirdecim_crcf_reset(_q: iirdecim_crcf) -> ();
    pub fn iirdecim_crcf_execute(_q: iirdecim_crcf,
                                 _x: *mut liquid_float_complex,
                                 _y: *mut liquid_float_complex) -> ();
    pub fn iirdecim_crcf_execute_block(_q: iirdecim_crcf,
                                       _x: *mut liquid_float_complex,
                                       _n: ::libc::c_uint,
                                       _y: *mut liquid_float_complex) -> ();
    pub fn iirdecim_crcf_groupdelay(_q: iirdecim_crcf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn iirdecim_cccf_create(_M: ::libc::c_uint,
                                _b: *mut liquid_float_complex,
                                _nb: ::libc::c_uint,
                                _a: *mut liquid_float_complex,
                                _na: ::libc::c_uint) -> iirdecim_cccf;
    pub fn iirdecim_cccf_create_default(_M: ::libc::c_uint,
                                        _order: ::libc::c_uint)
     -> iirdecim_cccf;
    pub fn iirdecim_cccf_create_prototype(_M: ::libc::c_uint,
                                          _ftype: liquid_iirdes_filtertype,
                                          _btype: liquid_iirdes_bandtype,
                                          _format: liquid_iirdes_format,
                                          _order: ::libc::c_uint,
                                          _fc: ::libc::c_float,
                                          _f0: ::libc::c_float,
                                          _Ap: ::libc::c_float,
                                          _As: ::libc::c_float)
     -> iirdecim_cccf;
    pub fn iirdecim_cccf_destroy(_q: iirdecim_cccf) -> ();
    pub fn iirdecim_cccf_print(_q: iirdecim_cccf) -> ();
    pub fn iirdecim_cccf_reset(_q: iirdecim_cccf) -> ();
    pub fn iirdecim_cccf_execute(_q: iirdecim_cccf,
                                 _x: *mut liquid_float_complex,
                                 _y: *mut liquid_float_complex) -> ();
    pub fn iirdecim_cccf_execute_block(_q: iirdecim_cccf,
                                       _x: *mut liquid_float_complex,
                                       _n: ::libc::c_uint,
                                       _y: *mut liquid_float_complex) -> ();
    pub fn iirdecim_cccf_groupdelay(_q: iirdecim_cccf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn resamp2_rrrf_create(_m: ::libc::c_uint, _f0: ::libc::c_float,
                               _As: ::libc::c_float) -> resamp2_rrrf;
    pub fn resamp2_rrrf_recreate(_q: resamp2_rrrf, _m: ::libc::c_uint,
                                 _f0: ::libc::c_float, _As: ::libc::c_float)
     -> resamp2_rrrf;
    pub fn resamp2_rrrf_destroy(_q: resamp2_rrrf) -> ();
    pub fn resamp2_rrrf_print(_q: resamp2_rrrf) -> ();
    pub fn resamp2_rrrf_clear(_q: resamp2_rrrf) -> ();
    pub fn resamp2_rrrf_get_delay(_q: resamp2_rrrf) -> ::libc::c_uint;
    pub fn resamp2_rrrf_filter_execute(_q: resamp2_rrrf, _x: ::libc::c_float,
                                       _y0: *mut ::libc::c_float,
                                       _y1: *mut ::libc::c_float) -> ();
    pub fn resamp2_rrrf_analyzer_execute(_q: resamp2_rrrf,
                                         _x: *mut ::libc::c_float,
                                         _y: *mut ::libc::c_float) -> ();
    pub fn resamp2_rrrf_synthesizer_execute(_q: resamp2_rrrf,
                                            _x: *mut ::libc::c_float,
                                            _y: *mut ::libc::c_float) -> ();
    pub fn resamp2_rrrf_decim_execute(_q: resamp2_rrrf,
                                      _x: *mut ::libc::c_float,
                                      _y: *mut ::libc::c_float) -> ();
    pub fn resamp2_rrrf_interp_execute(_q: resamp2_rrrf, _x: ::libc::c_float,
                                       _y: *mut ::libc::c_float) -> ();
    pub fn resamp2_crcf_create(_m: ::libc::c_uint, _f0: ::libc::c_float,
                               _As: ::libc::c_float) -> resamp2_crcf;
    pub fn resamp2_crcf_recreate(_q: resamp2_crcf, _m: ::libc::c_uint,
                                 _f0: ::libc::c_float, _As: ::libc::c_float)
     -> resamp2_crcf;
    pub fn resamp2_crcf_destroy(_q: resamp2_crcf) -> ();
    pub fn resamp2_crcf_print(_q: resamp2_crcf) -> ();
    pub fn resamp2_crcf_clear(_q: resamp2_crcf) -> ();
    pub fn resamp2_crcf_get_delay(_q: resamp2_crcf) -> ::libc::c_uint;
    pub fn resamp2_crcf_filter_execute(_q: resamp2_crcf,
                                       _x: liquid_float_complex,
                                       _y0: *mut liquid_float_complex,
                                       _y1: *mut liquid_float_complex) -> ();
    pub fn resamp2_crcf_analyzer_execute(_q: resamp2_crcf,
                                         _x: *mut liquid_float_complex,
                                         _y: *mut liquid_float_complex) -> ();
    pub fn resamp2_crcf_synthesizer_execute(_q: resamp2_crcf,
                                            _x: *mut liquid_float_complex,
                                            _y: *mut liquid_float_complex)
     -> ();
    pub fn resamp2_crcf_decim_execute(_q: resamp2_crcf,
                                      _x: *mut liquid_float_complex,
                                      _y: *mut liquid_float_complex) -> ();
    pub fn resamp2_crcf_interp_execute(_q: resamp2_crcf,
                                       _x: liquid_float_complex,
                                       _y: *mut liquid_float_complex) -> ();
    pub fn resamp2_cccf_create(_m: ::libc::c_uint, _f0: ::libc::c_float,
                               _As: ::libc::c_float) -> resamp2_cccf;
    pub fn resamp2_cccf_recreate(_q: resamp2_cccf, _m: ::libc::c_uint,
                                 _f0: ::libc::c_float, _As: ::libc::c_float)
     -> resamp2_cccf;
    pub fn resamp2_cccf_destroy(_q: resamp2_cccf) -> ();
    pub fn resamp2_cccf_print(_q: resamp2_cccf) -> ();
    pub fn resamp2_cccf_clear(_q: resamp2_cccf) -> ();
    pub fn resamp2_cccf_get_delay(_q: resamp2_cccf) -> ::libc::c_uint;
    pub fn resamp2_cccf_filter_execute(_q: resamp2_cccf,
                                       _x: liquid_float_complex,
                                       _y0: *mut liquid_float_complex,
                                       _y1: *mut liquid_float_complex) -> ();
    pub fn resamp2_cccf_analyzer_execute(_q: resamp2_cccf,
                                         _x: *mut liquid_float_complex,
                                         _y: *mut liquid_float_complex) -> ();
    pub fn resamp2_cccf_synthesizer_execute(_q: resamp2_cccf,
                                            _x: *mut liquid_float_complex,
                                            _y: *mut liquid_float_complex)
     -> ();
    pub fn resamp2_cccf_decim_execute(_q: resamp2_cccf,
                                      _x: *mut liquid_float_complex,
                                      _y: *mut liquid_float_complex) -> ();
    pub fn resamp2_cccf_interp_execute(_q: resamp2_cccf,
                                       _x: liquid_float_complex,
                                       _y: *mut liquid_float_complex) -> ();
    pub fn resamp_rrrf_create(_rate: ::libc::c_float, _m: ::libc::c_uint,
                              _fc: ::libc::c_float, _As: ::libc::c_float,
                              _npfb: ::libc::c_uint) -> resamp_rrrf;
    pub fn resamp_rrrf_create_default(_rate: ::libc::c_float) -> resamp_rrrf;
    pub fn resamp_rrrf_destroy(_q: resamp_rrrf) -> ();
    pub fn resamp_rrrf_print(_q: resamp_rrrf) -> ();
    pub fn resamp_rrrf_reset(_q: resamp_rrrf) -> ();
    pub fn resamp_rrrf_get_delay(_q: resamp_rrrf) -> ::libc::c_uint;
    pub fn resamp_rrrf_setrate(_q: resamp_rrrf, _rate: ::libc::c_float) -> ();
    pub fn resamp_rrrf_execute(_q: resamp_rrrf, _x: ::libc::c_float,
                               _y: *mut ::libc::c_float,
                               _num_written: *mut ::libc::c_uint) -> ();
    pub fn resamp_rrrf_execute_block(_q: resamp_rrrf,
                                     _x: *mut ::libc::c_float,
                                     _nx: ::libc::c_uint,
                                     _y: *mut ::libc::c_float,
                                     _ny: *mut ::libc::c_uint) -> ();
    pub fn resamp_crcf_create(_rate: ::libc::c_float, _m: ::libc::c_uint,
                              _fc: ::libc::c_float, _As: ::libc::c_float,
                              _npfb: ::libc::c_uint) -> resamp_crcf;
    pub fn resamp_crcf_create_default(_rate: ::libc::c_float) -> resamp_crcf;
    pub fn resamp_crcf_destroy(_q: resamp_crcf) -> ();
    pub fn resamp_crcf_print(_q: resamp_crcf) -> ();
    pub fn resamp_crcf_reset(_q: resamp_crcf) -> ();
    pub fn resamp_crcf_get_delay(_q: resamp_crcf) -> ::libc::c_uint;
    pub fn resamp_crcf_setrate(_q: resamp_crcf, _rate: ::libc::c_float) -> ();
    pub fn resamp_crcf_execute(_q: resamp_crcf, _x: liquid_float_complex,
                               _y: *mut liquid_float_complex,
                               _num_written: *mut ::libc::c_uint) -> ();
    pub fn resamp_crcf_execute_block(_q: resamp_crcf,
                                     _x: *mut liquid_float_complex,
                                     _nx: ::libc::c_uint,
                                     _y: *mut liquid_float_complex,
                                     _ny: *mut ::libc::c_uint) -> ();
    pub fn resamp_cccf_create(_rate: ::libc::c_float, _m: ::libc::c_uint,
                              _fc: ::libc::c_float, _As: ::libc::c_float,
                              _npfb: ::libc::c_uint) -> resamp_cccf;
    pub fn resamp_cccf_create_default(_rate: ::libc::c_float) -> resamp_cccf;
    pub fn resamp_cccf_destroy(_q: resamp_cccf) -> ();
    pub fn resamp_cccf_print(_q: resamp_cccf) -> ();
    pub fn resamp_cccf_reset(_q: resamp_cccf) -> ();
    pub fn resamp_cccf_get_delay(_q: resamp_cccf) -> ::libc::c_uint;
    pub fn resamp_cccf_setrate(_q: resamp_cccf, _rate: ::libc::c_float) -> ();
    pub fn resamp_cccf_execute(_q: resamp_cccf, _x: liquid_float_complex,
                               _y: *mut liquid_float_complex,
                               _num_written: *mut ::libc::c_uint) -> ();
    pub fn resamp_cccf_execute_block(_q: resamp_cccf,
                                     _x: *mut liquid_float_complex,
                                     _nx: ::libc::c_uint,
                                     _y: *mut liquid_float_complex,
                                     _ny: *mut ::libc::c_uint) -> ();
    pub fn msresamp2_rrrf_create(_type: ::libc::c_int,
                                 _num_stages: ::libc::c_uint,
                                 _fc: ::libc::c_float, _f0: ::libc::c_float,
                                 _As: ::libc::c_float) -> msresamp2_rrrf;
    pub fn msresamp2_rrrf_destroy(_q: msresamp2_rrrf) -> ();
    pub fn msresamp2_rrrf_print(_q: msresamp2_rrrf) -> ();
    pub fn msresamp2_rrrf_reset(_q: msresamp2_rrrf) -> ();
    pub fn msresamp2_rrrf_get_delay(_q: msresamp2_rrrf) -> ::libc::c_float;
    pub fn msresamp2_rrrf_execute(_q: msresamp2_rrrf,
                                  _x: *mut ::libc::c_float,
                                  _y: *mut ::libc::c_float) -> ();
    pub fn msresamp2_crcf_create(_type: ::libc::c_int,
                                 _num_stages: ::libc::c_uint,
                                 _fc: ::libc::c_float, _f0: ::libc::c_float,
                                 _As: ::libc::c_float) -> msresamp2_crcf;
    pub fn msresamp2_crcf_destroy(_q: msresamp2_crcf) -> ();
    pub fn msresamp2_crcf_print(_q: msresamp2_crcf) -> ();
    pub fn msresamp2_crcf_reset(_q: msresamp2_crcf) -> ();
    pub fn msresamp2_crcf_get_delay(_q: msresamp2_crcf) -> ::libc::c_float;
    pub fn msresamp2_crcf_execute(_q: msresamp2_crcf,
                                  _x: *mut liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn msresamp2_cccf_create(_type: ::libc::c_int,
                                 _num_stages: ::libc::c_uint,
                                 _fc: ::libc::c_float, _f0: ::libc::c_float,
                                 _As: ::libc::c_float) -> msresamp2_cccf;
    pub fn msresamp2_cccf_destroy(_q: msresamp2_cccf) -> ();
    pub fn msresamp2_cccf_print(_q: msresamp2_cccf) -> ();
    pub fn msresamp2_cccf_reset(_q: msresamp2_cccf) -> ();
    pub fn msresamp2_cccf_get_delay(_q: msresamp2_cccf) -> ::libc::c_float;
    pub fn msresamp2_cccf_execute(_q: msresamp2_cccf,
                                  _x: *mut liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn msresamp_rrrf_create(_r: ::libc::c_float, _As: ::libc::c_float)
     -> msresamp_rrrf;
    pub fn msresamp_rrrf_destroy(_q: msresamp_rrrf) -> ();
    pub fn msresamp_rrrf_print(_q: msresamp_rrrf) -> ();
    pub fn msresamp_rrrf_reset(_q: msresamp_rrrf) -> ();
    pub fn msresamp_rrrf_get_delay(_q: msresamp_rrrf) -> ::libc::c_float;
    pub fn msresamp_rrrf_execute(_q: msresamp_rrrf, _x: *mut ::libc::c_float,
                                 _nx: ::libc::c_uint,
                                 _y: *mut ::libc::c_float,
                                 _ny: *mut ::libc::c_uint) -> ();
    pub fn msresamp_crcf_create(_r: ::libc::c_float, _As: ::libc::c_float)
     -> msresamp_crcf;
    pub fn msresamp_crcf_destroy(_q: msresamp_crcf) -> ();
    pub fn msresamp_crcf_print(_q: msresamp_crcf) -> ();
    pub fn msresamp_crcf_reset(_q: msresamp_crcf) -> ();
    pub fn msresamp_crcf_get_delay(_q: msresamp_crcf) -> ::libc::c_float;
    pub fn msresamp_crcf_execute(_q: msresamp_crcf,
                                 _x: *mut liquid_float_complex,
                                 _nx: ::libc::c_uint,
                                 _y: *mut liquid_float_complex,
                                 _ny: *mut ::libc::c_uint) -> ();
    pub fn msresamp_cccf_create(_r: ::libc::c_float, _As: ::libc::c_float)
     -> msresamp_cccf;
    pub fn msresamp_cccf_destroy(_q: msresamp_cccf) -> ();
    pub fn msresamp_cccf_print(_q: msresamp_cccf) -> ();
    pub fn msresamp_cccf_reset(_q: msresamp_cccf) -> ();
    pub fn msresamp_cccf_get_delay(_q: msresamp_cccf) -> ::libc::c_float;
    pub fn msresamp_cccf_execute(_q: msresamp_cccf,
                                 _x: *mut liquid_float_complex,
                                 _nx: ::libc::c_uint,
                                 _y: *mut liquid_float_complex,
                                 _ny: *mut ::libc::c_uint) -> ();
    pub fn symsync_rrrf_create(_k: ::libc::c_uint, _M: ::libc::c_uint,
                               _h: *mut ::libc::c_float,
                               _h_len: ::libc::c_uint) -> symsync_rrrf;
    pub fn symsync_rrrf_create_rnyquist(_type: ::libc::c_int,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float,
                                        _M: ::libc::c_uint) -> symsync_rrrf;
    pub fn symsync_rrrf_create_kaiser(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                      _beta: ::libc::c_float,
                                      _M: ::libc::c_uint) -> symsync_rrrf;
    pub fn symsync_rrrf_destroy(_q: symsync_rrrf) -> ();
    pub fn symsync_rrrf_print(_q: symsync_rrrf) -> ();
    pub fn symsync_rrrf_reset(_q: symsync_rrrf) -> ();
    pub fn symsync_rrrf_lock(_q: symsync_rrrf) -> ();
    pub fn symsync_rrrf_unlock(_q: symsync_rrrf) -> ();
    pub fn symsync_rrrf_set_output_rate(_q: symsync_rrrf,
                                        _k_out: ::libc::c_uint) -> ();
    pub fn symsync_rrrf_set_lf_bw(_q: symsync_rrrf, _bt: ::libc::c_float)
     -> ();
    pub fn symsync_rrrf_get_tau(_q: symsync_rrrf) -> ::libc::c_float;
    pub fn symsync_rrrf_execute(_q: symsync_rrrf, _x: *mut ::libc::c_float,
                                _nx: ::libc::c_uint, _y: *mut ::libc::c_float,
                                _ny: *mut ::libc::c_uint) -> ();
    pub fn symsync_crcf_create(_k: ::libc::c_uint, _M: ::libc::c_uint,
                               _h: *mut ::libc::c_float,
                               _h_len: ::libc::c_uint) -> symsync_crcf;
    pub fn symsync_crcf_create_rnyquist(_type: ::libc::c_int,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float,
                                        _M: ::libc::c_uint) -> symsync_crcf;
    pub fn symsync_crcf_create_kaiser(_k: ::libc::c_uint, _m: ::libc::c_uint,
                                      _beta: ::libc::c_float,
                                      _M: ::libc::c_uint) -> symsync_crcf;
    pub fn symsync_crcf_destroy(_q: symsync_crcf) -> ();
    pub fn symsync_crcf_print(_q: symsync_crcf) -> ();
    pub fn symsync_crcf_reset(_q: symsync_crcf) -> ();
    pub fn symsync_crcf_lock(_q: symsync_crcf) -> ();
    pub fn symsync_crcf_unlock(_q: symsync_crcf) -> ();
    pub fn symsync_crcf_set_output_rate(_q: symsync_crcf,
                                        _k_out: ::libc::c_uint) -> ();
    pub fn symsync_crcf_set_lf_bw(_q: symsync_crcf, _bt: ::libc::c_float)
     -> ();
    pub fn symsync_crcf_get_tau(_q: symsync_crcf) -> ::libc::c_float;
    pub fn symsync_crcf_execute(_q: symsync_crcf,
                                _x: *mut liquid_float_complex,
                                _nx: ::libc::c_uint,
                                _y: *mut liquid_float_complex,
                                _ny: *mut ::libc::c_uint) -> ();
    pub fn firfarrow_rrrf_create(_h_len: ::libc::c_uint, _p: ::libc::c_uint,
                                 _fc: ::libc::c_float, _As: ::libc::c_float)
     -> firfarrow_rrrf;
    pub fn firfarrow_rrrf_destroy(_q: firfarrow_rrrf) -> ();
    pub fn firfarrow_rrrf_print(_q: firfarrow_rrrf) -> ();
    pub fn firfarrow_rrrf_reset(_q: firfarrow_rrrf) -> ();
    pub fn firfarrow_rrrf_push(_q: firfarrow_rrrf, _x: ::libc::c_float) -> ();
    pub fn firfarrow_rrrf_set_delay(_q: firfarrow_rrrf, _mu: ::libc::c_float)
     -> ();
    pub fn firfarrow_rrrf_execute(_q: firfarrow_rrrf,
                                  _y: *mut ::libc::c_float) -> ();
    pub fn firfarrow_rrrf_execute_block(_q: firfarrow_rrrf,
                                        _x: *mut ::libc::c_float,
                                        _n: ::libc::c_uint,
                                        _y: *mut ::libc::c_float) -> ();
    pub fn firfarrow_rrrf_get_length(_q: firfarrow_rrrf) -> ::libc::c_uint;
    pub fn firfarrow_rrrf_get_coefficients(_q: firfarrow_rrrf,
                                           _h: *mut ::libc::c_float) -> ();
    pub fn firfarrow_rrrf_freqresponse(_q: firfarrow_rrrf,
                                       _fc: ::libc::c_float,
                                       _H: *mut liquid_float_complex) -> ();
    pub fn firfarrow_rrrf_groupdelay(_q: firfarrow_rrrf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn firfarrow_crcf_create(_h_len: ::libc::c_uint, _p: ::libc::c_uint,
                                 _fc: ::libc::c_float, _As: ::libc::c_float)
     -> firfarrow_crcf;
    pub fn firfarrow_crcf_destroy(_q: firfarrow_crcf) -> ();
    pub fn firfarrow_crcf_print(_q: firfarrow_crcf) -> ();
    pub fn firfarrow_crcf_reset(_q: firfarrow_crcf) -> ();
    pub fn firfarrow_crcf_push(_q: firfarrow_crcf, _x: liquid_float_complex)
     -> ();
    pub fn firfarrow_crcf_set_delay(_q: firfarrow_crcf, _mu: ::libc::c_float)
     -> ();
    pub fn firfarrow_crcf_execute(_q: firfarrow_crcf,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn firfarrow_crcf_execute_block(_q: firfarrow_crcf,
                                        _x: *mut liquid_float_complex,
                                        _n: ::libc::c_uint,
                                        _y: *mut liquid_float_complex) -> ();
    pub fn firfarrow_crcf_get_length(_q: firfarrow_crcf) -> ::libc::c_uint;
    pub fn firfarrow_crcf_get_coefficients(_q: firfarrow_crcf,
                                           _h: *mut ::libc::c_float) -> ();
    pub fn firfarrow_crcf_freqresponse(_q: firfarrow_crcf,
                                       _fc: ::libc::c_float,
                                       _H: *mut liquid_float_complex) -> ();
    pub fn firfarrow_crcf_groupdelay(_q: firfarrow_crcf, _fc: ::libc::c_float)
     -> ::libc::c_float;
    pub fn framesyncstats_init_default(_stats: *mut framesyncstats_s) -> ();
    pub fn framesyncstats_print(_stats: *mut framesyncstats_s) -> ();
    pub fn framedatastats_reset(_stats: *mut framedatastats_s) -> ();
    pub fn framedatastats_print(_stats: *mut framedatastats_s) -> ();
    pub fn qpacketmodem_create() -> qpacketmodem;
    pub fn qpacketmodem_destroy(_q: qpacketmodem) -> ();
    pub fn qpacketmodem_reset(_q: qpacketmodem) -> ();
    pub fn qpacketmodem_print(_q: qpacketmodem) -> ();
    pub fn qpacketmodem_configure(_q: qpacketmodem,
                                  _payload_len: ::libc::c_uint,
                                  _check: crc_scheme, _fec0: fec_scheme,
                                  _fec1: fec_scheme, _ms: ::libc::c_int)
     -> ::libc::c_int;
    pub fn qpacketmodem_get_frame_len(_q: qpacketmodem) -> ::libc::c_uint;
    pub fn qpacketmodem_get_payload_len(_q: qpacketmodem) -> ::libc::c_uint;
    pub fn qpacketmodem_get_crc(_q: qpacketmodem) -> ::libc::c_uint;
    pub fn qpacketmodem_get_fec0(_q: qpacketmodem) -> ::libc::c_uint;
    pub fn qpacketmodem_get_fec1(_q: qpacketmodem) -> ::libc::c_uint;
    pub fn qpacketmodem_get_modscheme(_q: qpacketmodem) -> ::libc::c_uint;
    pub fn qpacketmodem_encode(_q: qpacketmodem,
                               _payload: *mut ::libc::c_uchar,
                               _frame: *mut liquid_float_complex) -> ();
    pub fn qpacketmodem_decode(_q: qpacketmodem,
                               _frame: *mut liquid_float_complex,
                               _payload: *mut ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn qpilotgen_create(_payload_len: ::libc::c_uint,
                            _pilot_spacing: ::libc::c_uint) -> qpilotgen;
    pub fn qpilotgen_recreate(_q: qpilotgen, _payload_len: ::libc::c_uint,
                              _pilot_spacing: ::libc::c_uint) -> qpilotgen;
    pub fn qpilotgen_destroy(_q: qpilotgen) -> ();
    pub fn qpilotgen_reset(_q: qpilotgen) -> ();
    pub fn qpilotgen_print(_q: qpilotgen) -> ();
    pub fn qpilotgen_get_frame_len(_q: qpilotgen) -> ::libc::c_uint;
    pub fn qpilotgen_execute(_q: qpilotgen,
                             _payload: *mut liquid_float_complex,
                             _frame: *mut liquid_float_complex) -> ();
    pub fn qpilotsync_create(_payload_len: ::libc::c_uint,
                             _pilot_spacing: ::libc::c_uint) -> qpilotsync;
    pub fn qpilotsync_recreate(_q: qpilotsync, _payload_len: ::libc::c_uint,
                               _pilot_spacing: ::libc::c_uint) -> qpilotsync;
    pub fn qpilotsync_destroy(_q: qpilotsync) -> ();
    pub fn qpilotsync_reset(_q: qpilotsync) -> ();
    pub fn qpilotsync_print(_q: qpilotsync) -> ();
    pub fn qpilotsync_get_frame_len(_q: qpilotsync) -> ::libc::c_uint;
    pub fn qpilotsync_execute(_q: qpilotsync,
                              _frame: *mut liquid_float_complex,
                              _payload: *mut liquid_float_complex) -> ();
    pub fn qpilotsync_get_dphi(_q: qpilotsync) -> ::libc::c_float;
    pub fn qpilotsync_get_phi(_q: qpilotsync) -> ::libc::c_float;
    pub fn qpilotsync_get_gain(_q: qpilotsync) -> ::libc::c_float;
    pub fn framegen64_create() -> framegen64;
    pub fn framegen64_destroy(_q: framegen64) -> ();
    pub fn framegen64_print(_q: framegen64) -> ();
    pub fn framegen64_execute(_q: framegen64, _header: *mut ::libc::c_uchar,
                              _payload: *mut ::libc::c_uchar,
                              _frame: *mut liquid_float_complex) -> ();
    pub fn framesync64_create(_callback: framesync_callback,
                              _userdata: *mut ::libc::c_void) -> framesync64;
    pub fn framesync64_destroy(_q: framesync64) -> ();
    pub fn framesync64_print(_q: framesync64) -> ();
    pub fn framesync64_reset(_q: framesync64) -> ();
    pub fn framesync64_execute(_q: framesync64, _x: *mut liquid_float_complex,
                               _n: ::libc::c_uint) -> ();
    pub fn framesync64_debug_enable(_q: framesync64) -> ();
    pub fn framesync64_debug_disable(_q: framesync64) -> ();
    pub fn framesync64_debug_print(_q: framesync64,
                                   _filename: *const ::libc::c_char) -> ();
    pub fn flexframegenprops_init_default(_fgprops: *mut flexframegenprops_s)
     -> ();
    pub fn flexframegen_create(_props: *mut flexframegenprops_s)
     -> flexframegen;
    pub fn flexframegen_destroy(_q: flexframegen) -> ();
    pub fn flexframegen_print(_q: flexframegen) -> ();
    pub fn flexframegen_reset(_q: flexframegen) -> ();
    pub fn flexframegen_is_assembled(_q: flexframegen) -> ::libc::c_int;
    pub fn flexframegen_getprops(_q: flexframegen,
                                 _props: *mut flexframegenprops_s) -> ();
    pub fn flexframegen_setprops(_q: flexframegen,
                                 _props: *mut flexframegenprops_s)
     -> ::libc::c_int;
    pub fn flexframegen_getframelen(_q: flexframegen) -> ::libc::c_uint;
    pub fn flexframegen_assemble(_q: flexframegen,
                                 _header: *mut ::libc::c_uchar,
                                 _payload: *mut ::libc::c_uchar,
                                 _payload_len: ::libc::c_uint) -> ();
    pub fn flexframegen_write_samples(_q: flexframegen,
                                      _buffer: *mut liquid_float_complex,
                                      _buffer_len: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn flexframesync_create(_callback: framesync_callback,
                                _userdata: *mut ::libc::c_void)
     -> flexframesync;
    pub fn flexframesync_destroy(_q: flexframesync) -> ();
    pub fn flexframesync_print(_q: flexframesync) -> ();
    pub fn flexframesync_reset(_q: flexframesync) -> ();
    pub fn flexframesync_execute(_q: flexframesync,
                                 _x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> ();
    pub fn flexframesync_reset_framedatastats(_q: flexframesync) -> ();
    pub fn flexframesync_get_framedatastats(_q: flexframesync)
     -> framedatastats_s;
    pub fn flexframesync_debug_enable(_q: flexframesync) -> ();
    pub fn flexframesync_debug_disable(_q: flexframesync) -> ();
    pub fn flexframesync_debug_print(_q: flexframesync,
                                     _filename: *const ::libc::c_char) -> ();
    pub fn bpacketgen_create(_m: ::libc::c_uint, _dec_msg_len: ::libc::c_uint,
                             _crc: ::libc::c_int, _fec0: ::libc::c_int,
                             _fec1: ::libc::c_int) -> bpacketgen;
    pub fn bpacketgen_recreate(_q: bpacketgen, _m: ::libc::c_uint,
                               _dec_msg_len: ::libc::c_uint,
                               _crc: ::libc::c_int, _fec0: ::libc::c_int,
                               _fec1: ::libc::c_int) -> bpacketgen;
    pub fn bpacketgen_destroy(_q: bpacketgen) -> ();
    pub fn bpacketgen_print(_q: bpacketgen) -> ();
    pub fn bpacketgen_get_packet_len(_q: bpacketgen) -> ::libc::c_uint;
    pub fn bpacketgen_encode(_q: bpacketgen, _msg_dec: *mut ::libc::c_uchar,
                             _packet: *mut ::libc::c_uchar) -> ();
    pub fn bpacketsync_create(_m: ::libc::c_uint,
                              _callback: bpacketsync_callback,
                              _userdata: *mut ::libc::c_void) -> bpacketsync;
    pub fn bpacketsync_destroy(_q: bpacketsync) -> ();
    pub fn bpacketsync_print(_q: bpacketsync) -> ();
    pub fn bpacketsync_reset(_q: bpacketsync) -> ();
    pub fn bpacketsync_execute(_q: bpacketsync, _bytes: *mut ::libc::c_uchar,
                               _n: ::libc::c_uint) -> ();
    pub fn bpacketsync_execute_byte(_q: bpacketsync, _byte: ::libc::c_uchar)
     -> ();
    pub fn bpacketsync_execute_sym(_q: bpacketsync, _sym: ::libc::c_uchar,
                                   _bps: ::libc::c_uint) -> ();
    pub fn bpacketsync_execute_bit(_q: bpacketsync, _bit: ::libc::c_uchar)
     -> ();
    pub fn gmskframegen_create() -> gmskframegen;
    pub fn gmskframegen_destroy(_fg: gmskframegen) -> ();
    pub fn gmskframegen_print(_fg: gmskframegen) -> ();
    pub fn gmskframegen_reset(_fg: gmskframegen) -> ();
    pub fn gmskframegen_assemble(_fg: gmskframegen,
                                 _header: *mut ::libc::c_uchar,
                                 _payload: *mut ::libc::c_uchar,
                                 _payload_len: ::libc::c_uint,
                                 _check: crc_scheme, _fec0: fec_scheme,
                                 _fec1: fec_scheme) -> ();
    pub fn gmskframegen_getframelen(_q: gmskframegen) -> ::libc::c_uint;
    pub fn gmskframegen_write_samples(_fg: gmskframegen,
                                      _y: *mut liquid_float_complex)
     -> ::libc::c_int;
    pub fn gmskframesync_create(_callback: framesync_callback,
                                _userdata: *mut ::libc::c_void)
     -> gmskframesync;
    pub fn gmskframesync_destroy(_q: gmskframesync) -> ();
    pub fn gmskframesync_print(_q: gmskframesync) -> ();
    pub fn gmskframesync_reset(_q: gmskframesync) -> ();
    pub fn gmskframesync_execute(_q: gmskframesync,
                                 _x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> ();
    pub fn gmskframesync_debug_enable(_q: gmskframesync) -> ();
    pub fn gmskframesync_debug_disable(_q: gmskframesync) -> ();
    pub fn gmskframesync_debug_print(_q: gmskframesync,
                                     _filename: *const ::libc::c_char) -> ();
    pub fn ofdmflexframegenprops_init_default(_props:
                                                  *mut ofdmflexframegenprops_s)
     -> ();
    pub fn ofdmflexframegen_create(_M: ::libc::c_uint,
                                   _cp_len: ::libc::c_uint,
                                   _taper_len: ::libc::c_uint,
                                   _p: *mut ::libc::c_uchar,
                                   _fgprops: *mut ofdmflexframegenprops_s)
     -> ofdmflexframegen;
    pub fn ofdmflexframegen_destroy(_q: ofdmflexframegen) -> ();
    pub fn ofdmflexframegen_print(_q: ofdmflexframegen) -> ();
    pub fn ofdmflexframegen_reset(_q: ofdmflexframegen) -> ();
    pub fn ofdmflexframegen_is_assembled(_q: ofdmflexframegen)
     -> ::libc::c_int;
    pub fn ofdmflexframegen_getprops(_q: ofdmflexframegen,
                                     _props: *mut ofdmflexframegenprops_s)
     -> ();
    pub fn ofdmflexframegen_setprops(_q: ofdmflexframegen,
                                     _props: *mut ofdmflexframegenprops_s)
     -> ();
    pub fn ofdmflexframegen_getframelen(_q: ofdmflexframegen)
     -> ::libc::c_uint;
    pub fn ofdmflexframegen_assemble(_q: ofdmflexframegen,
                                     _header: *mut ::libc::c_uchar,
                                     _payload: *mut ::libc::c_uchar,
                                     _payload_len: ::libc::c_uint) -> ();
    pub fn ofdmflexframegen_writesymbol(_q: ofdmflexframegen,
                                        _buffer: *mut liquid_float_complex)
     -> ::libc::c_int;
    pub fn ofdmflexframesync_create(_M: ::libc::c_uint,
                                    _cp_len: ::libc::c_uint,
                                    _taper_len: ::libc::c_uint,
                                    _p: *mut ::libc::c_uchar,
                                    _callback: framesync_callback,
                                    _userdata: *mut ::libc::c_void)
     -> ofdmflexframesync;
    pub fn ofdmflexframesync_destroy(_q: ofdmflexframesync) -> ();
    pub fn ofdmflexframesync_print(_q: ofdmflexframesync) -> ();
    pub fn ofdmflexframesync_reset(_q: ofdmflexframesync) -> ();
    pub fn ofdmflexframesync_execute(_q: ofdmflexframesync,
                                     _x: *mut liquid_float_complex,
                                     _n: ::libc::c_uint) -> ();
    pub fn ofdmflexframesync_get_rssi(_q: ofdmflexframesync)
     -> ::libc::c_float;
    pub fn ofdmflexframesync_get_cfo(_q: ofdmflexframesync)
     -> ::libc::c_float;
    pub fn ofdmflexframesync_debug_enable(_q: ofdmflexframesync) -> ();
    pub fn ofdmflexframesync_debug_disable(_q: ofdmflexframesync) -> ();
    pub fn ofdmflexframesync_debug_print(_q: ofdmflexframesync,
                                         _filename: *const ::libc::c_char)
     -> ();
    pub fn bsync_rrrf_create(_n: ::libc::c_uint, _v: *mut ::libc::c_float)
     -> bsync_rrrf;
    pub fn bsync_rrrf_create_msequence(_g: ::libc::c_uint, _k: ::libc::c_uint)
     -> bsync_rrrf;
    pub fn bsync_rrrf_destroy(_fs: bsync_rrrf) -> ();
    pub fn bsync_rrrf_print(_fs: bsync_rrrf) -> ();
    pub fn bsync_rrrf_correlate(_fs: bsync_rrrf, _sym: ::libc::c_float,
                                _y: *mut ::libc::c_float) -> ();
    pub fn bsync_crcf_create(_n: ::libc::c_uint, _v: *mut ::libc::c_float)
     -> bsync_crcf;
    pub fn bsync_crcf_create_msequence(_g: ::libc::c_uint, _k: ::libc::c_uint)
     -> bsync_crcf;
    pub fn bsync_crcf_destroy(_fs: bsync_crcf) -> ();
    pub fn bsync_crcf_print(_fs: bsync_crcf) -> ();
    pub fn bsync_crcf_correlate(_fs: bsync_crcf, _sym: liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn bsync_cccf_create(_n: ::libc::c_uint,
                             _v: *mut liquid_float_complex) -> bsync_cccf;
    pub fn bsync_cccf_create_msequence(_g: ::libc::c_uint, _k: ::libc::c_uint)
     -> bsync_cccf;
    pub fn bsync_cccf_destroy(_fs: bsync_cccf) -> ();
    pub fn bsync_cccf_print(_fs: bsync_cccf) -> ();
    pub fn bsync_cccf_correlate(_fs: bsync_cccf, _sym: liquid_float_complex,
                                _y: *mut liquid_float_complex) -> ();
    pub fn presync_cccf_create(_v: *mut liquid_float_complex,
                               _n: ::libc::c_uint, _dphi_max: ::libc::c_float,
                               _m: ::libc::c_uint) -> presync_cccf;
    pub fn presync_cccf_destroy(_q: presync_cccf) -> ();
    pub fn presync_cccf_print(_q: presync_cccf) -> ();
    pub fn presync_cccf_reset(_q: presync_cccf) -> ();
    pub fn presync_cccf_push(_q: presync_cccf, _x: liquid_float_complex)
     -> ();
    pub fn presync_cccf_correlate(_q: presync_cccf,
                                  _rxy: *mut liquid_float_complex,
                                  _dphi_hat: *mut ::libc::c_float) -> ();
    pub fn bpresync_cccf_create(_v: *mut liquid_float_complex,
                                _n: ::libc::c_uint,
                                _dphi_max: ::libc::c_float,
                                _m: ::libc::c_uint) -> bpresync_cccf;
    pub fn bpresync_cccf_destroy(_q: bpresync_cccf) -> ();
    pub fn bpresync_cccf_print(_q: bpresync_cccf) -> ();
    pub fn bpresync_cccf_reset(_q: bpresync_cccf) -> ();
    pub fn bpresync_cccf_push(_q: bpresync_cccf, _x: liquid_float_complex)
     -> ();
    pub fn bpresync_cccf_correlate(_q: bpresync_cccf,
                                   _rxy: *mut liquid_float_complex,
                                   _dphi_hat: *mut ::libc::c_float) -> ();
    pub fn qdetector_cccf_create(_s: *mut liquid_float_complex,
                                 _s_len: ::libc::c_uint) -> qdetector_cccf;
    pub fn qdetector_cccf_create_linear(_sequence: *mut liquid_float_complex,
                                        _sequence_len: ::libc::c_uint,
                                        _ftype: ::libc::c_int,
                                        _k: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _beta: ::libc::c_float)
     -> qdetector_cccf;
    pub fn qdetector_cccf_create_gmsk(_sequence: *mut ::libc::c_uchar,
                                      _sequence_len: ::libc::c_uint,
                                      _k: ::libc::c_uint, _m: ::libc::c_uint,
                                      _beta: ::libc::c_float)
     -> qdetector_cccf;

    pub fn qdetector_cccf_destroy(_q: qdetector_cccf) -> ();
    pub fn qdetector_cccf_print(_q: qdetector_cccf) -> ();
    pub fn qdetector_cccf_reset(_q: qdetector_cccf) -> ();
    pub fn qdetector_cccf_execute(_q: qdetector_cccf,
                                  _x: liquid_float_complex)
     -> *mut ::libc::c_void;
    pub fn qdetector_cccf_set_threshold(_q: qdetector_cccf,
                                        _threshold: ::libc::c_float) -> ();
    pub fn qdetector_cccf_get_seq_len(_q: qdetector_cccf) -> ::libc::c_uint;
    pub fn qdetector_cccf_get_sequence(_q: qdetector_cccf)
     -> *const ::libc::c_void;
    pub fn qdetector_cccf_get_buf_len(_q: qdetector_cccf) -> ::libc::c_uint;
    pub fn qdetector_cccf_get_tau(_q: qdetector_cccf) -> ::libc::c_float;
    pub fn qdetector_cccf_get_gamma(_q: qdetector_cccf) -> ::libc::c_float;
    pub fn qdetector_cccf_get_dphi(_q: qdetector_cccf) -> ::libc::c_float;
    pub fn qdetector_cccf_get_phi(_q: qdetector_cccf) -> ::libc::c_float;
    pub fn detector_cccf_create(_s: *mut liquid_float_complex,
                                _n: ::libc::c_uint,
                                _threshold: ::libc::c_float,
                                _dphi_max: ::libc::c_float) -> detector_cccf;
    pub fn detector_cccf_destroy(_q: detector_cccf) -> ();
    pub fn detector_cccf_print(_q: detector_cccf) -> ();
    pub fn detector_cccf_reset(_q: detector_cccf) -> ();
    pub fn detector_cccf_correlate(_q: detector_cccf,
                                   _x: liquid_float_complex,
                                   _tau_hat: *mut ::libc::c_float,
                                   _dphi_hat: *mut ::libc::c_float,
                                   _gamma_hat: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn liquid_lngammaf(_z: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_gammaf(_z: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_lnlowergammaf(_z: ::libc::c_float, _alpha: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_lnuppergammaf(_z: ::libc::c_float, _alpha: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_lowergammaf(_z: ::libc::c_float, _alpha: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_uppergammaf(_z: ::libc::c_float, _alpha: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_factorialf(_n: ::libc::c_uint) -> ::libc::c_float;
    pub fn liquid_lnbesselif(_nu: ::libc::c_float, _z: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_besselif(_nu: ::libc::c_float, _z: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_besseli0f(_z: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_besseljf(_nu: ::libc::c_float, _z: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_besselj0f(_z: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_Qf(_z: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_MarcumQf(_M: ::libc::c_int, _alpha: ::libc::c_float,
                           _beta: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_MarcumQ1f(_alpha: ::libc::c_float, _beta: ::libc::c_float)
     -> ::libc::c_float;
    pub fn sincf(_x: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_nextpow2(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_nchoosek(_n: ::libc::c_uint, _k: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_kbd(_n: ::libc::c_uint, _N: ::libc::c_uint,
                      _beta: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_kbd_window(_n: ::libc::c_uint, _beta: ::libc::c_float,
                             _w: *mut ::libc::c_float) -> ();
    pub fn kaiser(_n: ::libc::c_uint, _N: ::libc::c_uint,
                  _beta: ::libc::c_float, _dt: ::libc::c_float)
     -> ::libc::c_float;
    pub fn hamming(_n: ::libc::c_uint, _N: ::libc::c_uint) -> ::libc::c_float;
    pub fn hann(_n: ::libc::c_uint, _N: ::libc::c_uint) -> ::libc::c_float;
    pub fn blackmanharris(_n: ::libc::c_uint, _N: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn poly_val(_p: *mut ::libc::c_double, _k: ::libc::c_uint,
                    _x: ::libc::c_double) -> ::libc::c_double;
    pub fn poly_fit(_x: *mut ::libc::c_double, _y: *mut ::libc::c_double,
                    _n: ::libc::c_uint, _p: *mut ::libc::c_double,
                    _k: ::libc::c_uint) -> ();
    pub fn poly_fit_lagrange(_x: *mut ::libc::c_double,
                             _y: *mut ::libc::c_double, _n: ::libc::c_uint,
                             _p: *mut ::libc::c_double) -> ();
    pub fn poly_interp_lagrange(_x: *mut ::libc::c_double,
                                _y: *mut ::libc::c_double, _n: ::libc::c_uint,
                                _x0: ::libc::c_double) -> ::libc::c_double;
    pub fn poly_fit_lagrange_barycentric(_x: *mut ::libc::c_double,
                                         _n: ::libc::c_uint,
                                         _w: *mut ::libc::c_double) -> ();
    pub fn poly_val_lagrange_barycentric(_x: *mut ::libc::c_double,
                                         _y: *mut ::libc::c_double,
                                         _w: *mut ::libc::c_double,
                                         _x0: ::libc::c_double,
                                         _n: ::libc::c_uint)
     -> ::libc::c_double;
    pub fn poly_expandbinomial(_n: ::libc::c_uint, _p: *mut ::libc::c_double)
     -> ();
    pub fn poly_expandbinomial_pm(_m: ::libc::c_uint, _k: ::libc::c_uint,
                                  _p: *mut ::libc::c_double) -> ();
    pub fn poly_expandroots(_a: *mut ::libc::c_double, _n: ::libc::c_uint,
                            _c: *mut ::libc::c_double) -> ();
    pub fn poly_expandroots2(_a: *mut ::libc::c_double,
                             _b: *mut ::libc::c_double, _n: ::libc::c_uint,
                             _c: *mut ::libc::c_double) -> ();
    pub fn poly_findroots(_poly: *mut ::libc::c_double, _n: ::libc::c_uint,
                          _roots: *mut liquid_double_complex) -> ();
    pub fn poly_findroots_durandkerner(_poly: *mut ::libc::c_double,
                                       _k: ::libc::c_uint,
                                       _roots: *mut liquid_double_complex)
     -> ();
    pub fn poly_findroots_bairstow(_poly: *mut ::libc::c_double,
                                   _k: ::libc::c_uint,
                                   _roots: *mut liquid_double_complex) -> ();
    pub fn poly_mul(_a: *mut ::libc::c_double, _order_a: ::libc::c_uint,
                    _b: *mut ::libc::c_double, _order_b: ::libc::c_uint,
                    _c: *mut ::libc::c_double) -> ();
    pub fn polyf_val(_p: *mut ::libc::c_float, _k: ::libc::c_uint,
                     _x: ::libc::c_float) -> ::libc::c_float;
    pub fn polyf_fit(_x: *mut ::libc::c_float, _y: *mut ::libc::c_float,
                     _n: ::libc::c_uint, _p: *mut ::libc::c_float,
                     _k: ::libc::c_uint) -> ();
    pub fn polyf_fit_lagrange(_x: *mut ::libc::c_float,
                              _y: *mut ::libc::c_float, _n: ::libc::c_uint,
                              _p: *mut ::libc::c_float) -> ();
    pub fn polyf_interp_lagrange(_x: *mut ::libc::c_float,
                                 _y: *mut ::libc::c_float, _n: ::libc::c_uint,
                                 _x0: ::libc::c_float) -> ::libc::c_float;
    pub fn polyf_fit_lagrange_barycentric(_x: *mut ::libc::c_float,
                                          _n: ::libc::c_uint,
                                          _w: *mut ::libc::c_float) -> ();
    pub fn polyf_val_lagrange_barycentric(_x: *mut ::libc::c_float,
                                          _y: *mut ::libc::c_float,
                                          _w: *mut ::libc::c_float,
                                          _x0: ::libc::c_float,
                                          _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn polyf_expandbinomial(_n: ::libc::c_uint, _p: *mut ::libc::c_float)
     -> ();
    pub fn polyf_expandbinomial_pm(_m: ::libc::c_uint, _k: ::libc::c_uint,
                                   _p: *mut ::libc::c_float) -> ();
    pub fn polyf_expandroots(_a: *mut ::libc::c_float, _n: ::libc::c_uint,
                             _c: *mut ::libc::c_float) -> ();
    pub fn polyf_expandroots2(_a: *mut ::libc::c_float,
                              _b: *mut ::libc::c_float, _n: ::libc::c_uint,
                              _c: *mut ::libc::c_float) -> ();
    pub fn polyf_findroots(_poly: *mut ::libc::c_float, _n: ::libc::c_uint,
                           _roots: *mut liquid_float_complex) -> ();
    pub fn polyf_findroots_durandkerner(_poly: *mut ::libc::c_float,
                                        _k: ::libc::c_uint,
                                        _roots: *mut liquid_float_complex)
     -> ();
    pub fn polyf_findroots_bairstow(_poly: *mut ::libc::c_float,
                                    _k: ::libc::c_uint,
                                    _roots: *mut liquid_float_complex) -> ();
    pub fn polyf_mul(_a: *mut ::libc::c_float, _order_a: ::libc::c_uint,
                     _b: *mut ::libc::c_float, _order_b: ::libc::c_uint,
                     _c: *mut ::libc::c_float) -> ();
    pub fn polyc_val(_p: *mut liquid_double_complex, _k: ::libc::c_uint,
                     _x: liquid_double_complex) -> liquid_double_complex;
    pub fn polyc_fit(_x: *mut liquid_double_complex,
                     _y: *mut liquid_double_complex, _n: ::libc::c_uint,
                     _p: *mut liquid_double_complex, _k: ::libc::c_uint)
     -> ();
    pub fn polyc_fit_lagrange(_x: *mut liquid_double_complex,
                              _y: *mut liquid_double_complex,
                              _n: ::libc::c_uint,
                              _p: *mut liquid_double_complex) -> ();
    pub fn polyc_interp_lagrange(_x: *mut liquid_double_complex,
                                 _y: *mut liquid_double_complex,
                                 _n: ::libc::c_uint,
                                 _x0: liquid_double_complex)
     -> liquid_double_complex;
    pub fn polyc_fit_lagrange_barycentric(_x: *mut liquid_double_complex,
                                          _n: ::libc::c_uint,
                                          _w: *mut liquid_double_complex)
     -> ();
    pub fn polyc_val_lagrange_barycentric(_x: *mut liquid_double_complex,
                                          _y: *mut liquid_double_complex,
                                          _w: *mut liquid_double_complex,
                                          _x0: liquid_double_complex,
                                          _n: ::libc::c_uint)
     -> liquid_double_complex;
    pub fn polyc_expandbinomial(_n: ::libc::c_uint,
                                _p: *mut liquid_double_complex) -> ();
    pub fn polyc_expandbinomial_pm(_m: ::libc::c_uint, _k: ::libc::c_uint,
                                   _p: *mut liquid_double_complex) -> ();
    pub fn polyc_expandroots(_a: *mut liquid_double_complex,
                             _n: ::libc::c_uint,
                             _c: *mut liquid_double_complex) -> ();
    pub fn polyc_expandroots2(_a: *mut liquid_double_complex,
                              _b: *mut liquid_double_complex,
                              _n: ::libc::c_uint,
                              _c: *mut liquid_double_complex) -> ();
    pub fn polyc_findroots(_poly: *mut liquid_double_complex,
                           _n: ::libc::c_uint,
                           _roots: *mut liquid_double_complex) -> ();
    pub fn polyc_findroots_durandkerner(_poly: *mut liquid_double_complex,
                                        _k: ::libc::c_uint,
                                        _roots: *mut liquid_double_complex)
     -> ();
    pub fn polyc_findroots_bairstow(_poly: *mut liquid_double_complex,
                                    _k: ::libc::c_uint,
                                    _roots: *mut liquid_double_complex) -> ();
    pub fn polyc_mul(_a: *mut liquid_double_complex, _order_a: ::libc::c_uint,
                     _b: *mut liquid_double_complex, _order_b: ::libc::c_uint,
                     _c: *mut liquid_double_complex) -> ();
    pub fn polycf_val(_p: *mut liquid_float_complex, _k: ::libc::c_uint,
                      _x: liquid_float_complex) -> liquid_float_complex;
    pub fn polycf_fit(_x: *mut liquid_float_complex,
                      _y: *mut liquid_float_complex, _n: ::libc::c_uint,
                      _p: *mut liquid_float_complex, _k: ::libc::c_uint)
     -> ();
    pub fn polycf_fit_lagrange(_x: *mut liquid_float_complex,
                               _y: *mut liquid_float_complex,
                               _n: ::libc::c_uint,
                               _p: *mut liquid_float_complex) -> ();
    pub fn polycf_interp_lagrange(_x: *mut liquid_float_complex,
                                  _y: *mut liquid_float_complex,
                                  _n: ::libc::c_uint,
                                  _x0: liquid_float_complex)
     -> liquid_float_complex;
    pub fn polycf_fit_lagrange_barycentric(_x: *mut liquid_float_complex,
                                           _n: ::libc::c_uint,
                                           _w: *mut liquid_float_complex)
     -> ();
    pub fn polycf_val_lagrange_barycentric(_x: *mut liquid_float_complex,
                                           _y: *mut liquid_float_complex,
                                           _w: *mut liquid_float_complex,
                                           _x0: liquid_float_complex,
                                           _n: ::libc::c_uint)
     -> liquid_float_complex;
    pub fn polycf_expandbinomial(_n: ::libc::c_uint,
                                 _p: *mut liquid_float_complex) -> ();
    pub fn polycf_expandbinomial_pm(_m: ::libc::c_uint, _k: ::libc::c_uint,
                                    _p: *mut liquid_float_complex) -> ();
    pub fn polycf_expandroots(_a: *mut liquid_float_complex,
                              _n: ::libc::c_uint,
                              _c: *mut liquid_float_complex) -> ();
    pub fn polycf_expandroots2(_a: *mut liquid_float_complex,
                               _b: *mut liquid_float_complex,
                               _n: ::libc::c_uint,
                               _c: *mut liquid_float_complex) -> ();
    pub fn polycf_findroots(_poly: *mut liquid_float_complex,
                            _n: ::libc::c_uint,
                            _roots: *mut liquid_float_complex) -> ();
    pub fn polycf_findroots_durandkerner(_poly: *mut liquid_float_complex,
                                         _k: ::libc::c_uint,
                                         _roots: *mut liquid_float_complex)
     -> ();
    pub fn polycf_findroots_bairstow(_poly: *mut liquid_float_complex,
                                     _k: ::libc::c_uint,
                                     _roots: *mut liquid_float_complex) -> ();
    pub fn polycf_mul(_a: *mut liquid_float_complex, _order_a: ::libc::c_uint,
                      _b: *mut liquid_float_complex, _order_b: ::libc::c_uint,
                      _c: *mut liquid_float_complex) -> ();
    pub fn liquid_is_prime(_n: ::libc::c_uint) -> ::libc::c_int;
    pub fn liquid_factor(_n: ::libc::c_uint, _factors: *mut ::libc::c_uint,
                         _num_factors: *mut ::libc::c_uint) -> ();
    pub fn liquid_unique_factor(_n: ::libc::c_uint,
                                _factors: *mut ::libc::c_uint,
                                _num_factors: *mut ::libc::c_uint) -> ();
    pub fn liquid_modpow(_base: ::libc::c_uint, _exp: ::libc::c_uint,
                         _n: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_primitive_root(_n: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_primitive_root_prime(_n: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_totient(_n: ::libc::c_uint) -> ::libc::c_uint;
    pub fn matrixf_print(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixf_add(_x: *mut ::libc::c_float, _y: *mut ::libc::c_float,
                       _z: *mut ::libc::c_float, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrixf_sub(_x: *mut ::libc::c_float, _y: *mut ::libc::c_float,
                       _z: *mut ::libc::c_float, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrixf_pmul(_x: *mut ::libc::c_float, _y: *mut ::libc::c_float,
                        _z: *mut ::libc::c_float, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixf_pdiv(_x: *mut ::libc::c_float, _y: *mut ::libc::c_float,
                        _z: *mut ::libc::c_float, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixf_mul(_x: *mut ::libc::c_float, _rx: ::libc::c_uint,
                       _cx: ::libc::c_uint, _y: *mut ::libc::c_float,
                       _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                       _z: *mut ::libc::c_float, _rz: ::libc::c_uint,
                       _cz: ::libc::c_uint) -> ();
    pub fn matrixf_div(_x: *mut ::libc::c_float, _y: *mut ::libc::c_float,
                       _z: *mut ::libc::c_float, _n: ::libc::c_uint) -> ();
    pub fn matrixf_det(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ::libc::c_float;
    pub fn matrixf_trans(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixf_hermitian(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                             _c: ::libc::c_uint) -> ();
    pub fn matrixf_mul_transpose(_x: *mut ::libc::c_float, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint,
                                 _xxT: *mut ::libc::c_float) -> ();
    pub fn matrixf_transpose_mul(_x: *mut ::libc::c_float, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint,
                                 _xTx: *mut ::libc::c_float) -> ();
    pub fn matrixf_mul_hermitian(_x: *mut ::libc::c_float, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint,
                                 _xxH: *mut ::libc::c_float) -> ();
    pub fn matrixf_hermitian_mul(_x: *mut ::libc::c_float, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint,
                                 _xHx: *mut ::libc::c_float) -> ();
    pub fn matrixf_aug(_x: *mut ::libc::c_float, _rx: ::libc::c_uint,
                       _cx: ::libc::c_uint, _y: *mut ::libc::c_float,
                       _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                       _z: *mut ::libc::c_float, _rz: ::libc::c_uint,
                       _cz: ::libc::c_uint) -> ();
    pub fn matrixf_inv(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrixf_eye(_x: *mut ::libc::c_float, _n: ::libc::c_uint) -> ();
    pub fn matrixf_ones(_n: *mut ::libc::c_float, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixf_zeros(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixf_gjelim(_x: *mut ::libc::c_float, _r: ::libc::c_uint,
                          _c: ::libc::c_uint) -> ();
    pub fn matrixf_pivot(_x: *mut ::libc::c_float, _rx: ::libc::c_uint,
                         _cx: ::libc::c_uint, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixf_swaprows(_x: *mut ::libc::c_float, _rx: ::libc::c_uint,
                            _cx: ::libc::c_uint, _r1: ::libc::c_uint,
                            _r2: ::libc::c_uint) -> ();
    pub fn matrixf_linsolve(_A: *mut ::libc::c_float, _n: ::libc::c_uint,
                            _b: *mut ::libc::c_float,
                            _x: *mut ::libc::c_float,
                            _opts: *mut ::libc::c_void) -> ();
    pub fn matrixf_cgsolve(_A: *mut ::libc::c_float, _n: ::libc::c_uint,
                           _b: *mut ::libc::c_float, _x: *mut ::libc::c_float,
                           _opts: *mut ::libc::c_void) -> ();
    pub fn matrixf_ludecomp_crout(_x: *mut ::libc::c_float,
                                  _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                                  _L: *mut ::libc::c_float,
                                  _U: *mut ::libc::c_float,
                                  _P: *mut ::libc::c_float) -> ();
    pub fn matrixf_ludecomp_doolittle(_x: *mut ::libc::c_float,
                                      _rx: ::libc::c_uint,
                                      _cx: ::libc::c_uint,
                                      _L: *mut ::libc::c_float,
                                      _U: *mut ::libc::c_float,
                                      _P: *mut ::libc::c_float) -> ();
    pub fn matrixf_gramschmidt(_A: *mut ::libc::c_float, _r: ::libc::c_uint,
                               _c: ::libc::c_uint, _v: *mut ::libc::c_float)
     -> ();
    pub fn matrixf_qrdecomp_gramschmidt(_A: *mut ::libc::c_float,
                                        _m: ::libc::c_uint,
                                        _n: ::libc::c_uint,
                                        _Q: *mut ::libc::c_float,
                                        _R: *mut ::libc::c_float) -> ();
    pub fn matrixf_chol(_A: *mut ::libc::c_float, _n: ::libc::c_uint,
                        _L: *mut ::libc::c_float) -> ();
    pub fn matrix_print(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrix_add(_x: *mut ::libc::c_double, _y: *mut ::libc::c_double,
                      _z: *mut ::libc::c_double, _r: ::libc::c_uint,
                      _c: ::libc::c_uint) -> ();
    pub fn matrix_sub(_x: *mut ::libc::c_double, _y: *mut ::libc::c_double,
                      _z: *mut ::libc::c_double, _r: ::libc::c_uint,
                      _c: ::libc::c_uint) -> ();
    pub fn matrix_pmul(_x: *mut ::libc::c_double, _y: *mut ::libc::c_double,
                       _z: *mut ::libc::c_double, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrix_pdiv(_x: *mut ::libc::c_double, _y: *mut ::libc::c_double,
                       _z: *mut ::libc::c_double, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrix_mul(_x: *mut ::libc::c_double, _rx: ::libc::c_uint,
                      _cx: ::libc::c_uint, _y: *mut ::libc::c_double,
                      _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                      _z: *mut ::libc::c_double, _rz: ::libc::c_uint,
                      _cz: ::libc::c_uint) -> ();
    pub fn matrix_div(_x: *mut ::libc::c_double, _y: *mut ::libc::c_double,
                      _z: *mut ::libc::c_double, _n: ::libc::c_uint) -> ();
    pub fn matrix_det(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                      _c: ::libc::c_uint) -> ::libc::c_double;
    pub fn matrix_trans(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrix_hermitian(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                            _c: ::libc::c_uint) -> ();
    pub fn matrix_mul_transpose(_x: *mut ::libc::c_double, _m: ::libc::c_uint,
                                _n: ::libc::c_uint,
                                _xxT: *mut ::libc::c_double) -> ();
    pub fn matrix_transpose_mul(_x: *mut ::libc::c_double, _m: ::libc::c_uint,
                                _n: ::libc::c_uint,
                                _xTx: *mut ::libc::c_double) -> ();
    pub fn matrix_mul_hermitian(_x: *mut ::libc::c_double, _m: ::libc::c_uint,
                                _n: ::libc::c_uint,
                                _xxH: *mut ::libc::c_double) -> ();
    pub fn matrix_hermitian_mul(_x: *mut ::libc::c_double, _m: ::libc::c_uint,
                                _n: ::libc::c_uint,
                                _xHx: *mut ::libc::c_double) -> ();
    pub fn matrix_aug(_x: *mut ::libc::c_double, _rx: ::libc::c_uint,
                      _cx: ::libc::c_uint, _y: *mut ::libc::c_double,
                      _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                      _z: *mut ::libc::c_double, _rz: ::libc::c_uint,
                      _cz: ::libc::c_uint) -> ();
    pub fn matrix_inv(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                      _c: ::libc::c_uint) -> ();
    pub fn matrix_eye(_x: *mut ::libc::c_double, _n: ::libc::c_uint) -> ();
    pub fn matrix_ones(_n: *mut ::libc::c_double, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrix_zeros(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrix_gjelim(_x: *mut ::libc::c_double, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrix_pivot(_x: *mut ::libc::c_double, _rx: ::libc::c_uint,
                        _cx: ::libc::c_uint, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrix_swaprows(_x: *mut ::libc::c_double, _rx: ::libc::c_uint,
                           _cx: ::libc::c_uint, _r1: ::libc::c_uint,
                           _r2: ::libc::c_uint) -> ();
    pub fn matrix_linsolve(_A: *mut ::libc::c_double, _n: ::libc::c_uint,
                           _b: *mut ::libc::c_double,
                           _x: *mut ::libc::c_double,
                           _opts: *mut ::libc::c_void) -> ();
    pub fn matrix_cgsolve(_A: *mut ::libc::c_double, _n: ::libc::c_uint,
                          _b: *mut ::libc::c_double,
                          _x: *mut ::libc::c_double,
                          _opts: *mut ::libc::c_void) -> ();
    pub fn matrix_ludecomp_crout(_x: *mut ::libc::c_double,
                                 _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                                 _L: *mut ::libc::c_double,
                                 _U: *mut ::libc::c_double,
                                 _P: *mut ::libc::c_double) -> ();
    pub fn matrix_ludecomp_doolittle(_x: *mut ::libc::c_double,
                                     _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                                     _L: *mut ::libc::c_double,
                                     _U: *mut ::libc::c_double,
                                     _P: *mut ::libc::c_double) -> ();
    pub fn matrix_gramschmidt(_A: *mut ::libc::c_double, _r: ::libc::c_uint,
                              _c: ::libc::c_uint, _v: *mut ::libc::c_double)
     -> ();
    pub fn matrix_qrdecomp_gramschmidt(_A: *mut ::libc::c_double,
                                       _m: ::libc::c_uint, _n: ::libc::c_uint,
                                       _Q: *mut ::libc::c_double,
                                       _R: *mut ::libc::c_double) -> ();
    pub fn matrix_chol(_A: *mut ::libc::c_double, _n: ::libc::c_uint,
                       _L: *mut ::libc::c_double) -> ();
    pub fn matrixcf_print(_x: *mut liquid_float_complex, _r: ::libc::c_uint,
                          _c: ::libc::c_uint) -> ();
    pub fn matrixcf_add(_x: *mut liquid_float_complex,
                        _y: *mut liquid_float_complex,
                        _z: *mut liquid_float_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixcf_sub(_x: *mut liquid_float_complex,
                        _y: *mut liquid_float_complex,
                        _z: *mut liquid_float_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixcf_pmul(_x: *mut liquid_float_complex,
                         _y: *mut liquid_float_complex,
                         _z: *mut liquid_float_complex, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixcf_pdiv(_x: *mut liquid_float_complex,
                         _y: *mut liquid_float_complex,
                         _z: *mut liquid_float_complex, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixcf_mul(_x: *mut liquid_float_complex, _rx: ::libc::c_uint,
                        _cx: ::libc::c_uint, _y: *mut liquid_float_complex,
                        _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                        _z: *mut liquid_float_complex, _rz: ::libc::c_uint,
                        _cz: ::libc::c_uint) -> ();
    pub fn matrixcf_div(_x: *mut liquid_float_complex,
                        _y: *mut liquid_float_complex,
                        _z: *mut liquid_float_complex, _n: ::libc::c_uint)
     -> ();
    pub fn matrixcf_det(_x: *mut liquid_float_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> liquid_float_complex;
    pub fn matrixcf_trans(_x: *mut liquid_float_complex, _r: ::libc::c_uint,
                          _c: ::libc::c_uint) -> ();
    pub fn matrixcf_hermitian(_x: *mut liquid_float_complex,
                              _r: ::libc::c_uint, _c: ::libc::c_uint) -> ();
    pub fn matrixcf_mul_transpose(_x: *mut liquid_float_complex,
                                  _m: ::libc::c_uint, _n: ::libc::c_uint,
                                  _xxT: *mut liquid_float_complex) -> ();
    pub fn matrixcf_transpose_mul(_x: *mut liquid_float_complex,
                                  _m: ::libc::c_uint, _n: ::libc::c_uint,
                                  _xTx: *mut liquid_float_complex) -> ();
    pub fn matrixcf_mul_hermitian(_x: *mut liquid_float_complex,
                                  _m: ::libc::c_uint, _n: ::libc::c_uint,
                                  _xxH: *mut liquid_float_complex) -> ();
    pub fn matrixcf_hermitian_mul(_x: *mut liquid_float_complex,
                                  _m: ::libc::c_uint, _n: ::libc::c_uint,
                                  _xHx: *mut liquid_float_complex) -> ();
    pub fn matrixcf_aug(_x: *mut liquid_float_complex, _rx: ::libc::c_uint,
                        _cx: ::libc::c_uint, _y: *mut liquid_float_complex,
                        _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                        _z: *mut liquid_float_complex, _rz: ::libc::c_uint,
                        _cz: ::libc::c_uint) -> ();
    pub fn matrixcf_inv(_x: *mut liquid_float_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixcf_eye(_x: *mut liquid_float_complex, _n: ::libc::c_uint)
     -> ();
    pub fn matrixcf_ones(_n: *mut liquid_float_complex, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixcf_zeros(_x: *mut liquid_float_complex, _r: ::libc::c_uint,
                          _c: ::libc::c_uint) -> ();
    pub fn matrixcf_gjelim(_x: *mut liquid_float_complex, _r: ::libc::c_uint,
                           _c: ::libc::c_uint) -> ();
    pub fn matrixcf_pivot(_x: *mut liquid_float_complex, _rx: ::libc::c_uint,
                          _cx: ::libc::c_uint, _r: ::libc::c_uint,
                          _c: ::libc::c_uint) -> ();
    pub fn matrixcf_swaprows(_x: *mut liquid_float_complex,
                             _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                             _r1: ::libc::c_uint, _r2: ::libc::c_uint) -> ();
    pub fn matrixcf_linsolve(_A: *mut liquid_float_complex,
                             _n: ::libc::c_uint,
                             _b: *mut liquid_float_complex,
                             _x: *mut liquid_float_complex,
                             _opts: *mut ::libc::c_void) -> ();
    pub fn matrixcf_cgsolve(_A: *mut liquid_float_complex, _n: ::libc::c_uint,
                            _b: *mut liquid_float_complex,
                            _x: *mut liquid_float_complex,
                            _opts: *mut ::libc::c_void) -> ();
    pub fn matrixcf_ludecomp_crout(_x: *mut liquid_float_complex,
                                   _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                                   _L: *mut liquid_float_complex,
                                   _U: *mut liquid_float_complex,
                                   _P: *mut liquid_float_complex) -> ();
    pub fn matrixcf_ludecomp_doolittle(_x: *mut liquid_float_complex,
                                       _rx: ::libc::c_uint,
                                       _cx: ::libc::c_uint,
                                       _L: *mut liquid_float_complex,
                                       _U: *mut liquid_float_complex,
                                       _P: *mut liquid_float_complex) -> ();
    pub fn matrixcf_gramschmidt(_A: *mut liquid_float_complex,
                                _r: ::libc::c_uint, _c: ::libc::c_uint,
                                _v: *mut liquid_float_complex) -> ();
    pub fn matrixcf_qrdecomp_gramschmidt(_A: *mut liquid_float_complex,
                                         _m: ::libc::c_uint,
                                         _n: ::libc::c_uint,
                                         _Q: *mut liquid_float_complex,
                                         _R: *mut liquid_float_complex) -> ();
    pub fn matrixcf_chol(_A: *mut liquid_float_complex, _n: ::libc::c_uint,
                         _L: *mut liquid_float_complex) -> ();
    pub fn matrixc_print(_x: *mut liquid_double_complex, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixc_add(_x: *mut liquid_double_complex,
                       _y: *mut liquid_double_complex,
                       _z: *mut liquid_double_complex, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrixc_sub(_x: *mut liquid_double_complex,
                       _y: *mut liquid_double_complex,
                       _z: *mut liquid_double_complex, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrixc_pmul(_x: *mut liquid_double_complex,
                        _y: *mut liquid_double_complex,
                        _z: *mut liquid_double_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixc_pdiv(_x: *mut liquid_double_complex,
                        _y: *mut liquid_double_complex,
                        _z: *mut liquid_double_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixc_mul(_x: *mut liquid_double_complex, _rx: ::libc::c_uint,
                       _cx: ::libc::c_uint, _y: *mut liquid_double_complex,
                       _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                       _z: *mut liquid_double_complex, _rz: ::libc::c_uint,
                       _cz: ::libc::c_uint) -> ();
    pub fn matrixc_div(_x: *mut liquid_double_complex,
                       _y: *mut liquid_double_complex,
                       _z: *mut liquid_double_complex, _n: ::libc::c_uint)
     -> ();
    pub fn matrixc_det(_x: *mut liquid_double_complex, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> liquid_double_complex;
    pub fn matrixc_trans(_x: *mut liquid_double_complex, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixc_hermitian(_x: *mut liquid_double_complex,
                             _r: ::libc::c_uint, _c: ::libc::c_uint) -> ();
    pub fn matrixc_mul_transpose(_x: *mut liquid_double_complex,
                                 _m: ::libc::c_uint, _n: ::libc::c_uint,
                                 _xxT: *mut liquid_double_complex) -> ();
    pub fn matrixc_transpose_mul(_x: *mut liquid_double_complex,
                                 _m: ::libc::c_uint, _n: ::libc::c_uint,
                                 _xTx: *mut liquid_double_complex) -> ();
    pub fn matrixc_mul_hermitian(_x: *mut liquid_double_complex,
                                 _m: ::libc::c_uint, _n: ::libc::c_uint,
                                 _xxH: *mut liquid_double_complex) -> ();
    pub fn matrixc_hermitian_mul(_x: *mut liquid_double_complex,
                                 _m: ::libc::c_uint, _n: ::libc::c_uint,
                                 _xHx: *mut liquid_double_complex) -> ();
    pub fn matrixc_aug(_x: *mut liquid_double_complex, _rx: ::libc::c_uint,
                       _cx: ::libc::c_uint, _y: *mut liquid_double_complex,
                       _ry: ::libc::c_uint, _cy: ::libc::c_uint,
                       _z: *mut liquid_double_complex, _rz: ::libc::c_uint,
                       _cz: ::libc::c_uint) -> ();
    pub fn matrixc_inv(_x: *mut liquid_double_complex, _r: ::libc::c_uint,
                       _c: ::libc::c_uint) -> ();
    pub fn matrixc_eye(_x: *mut liquid_double_complex, _n: ::libc::c_uint)
     -> ();
    pub fn matrixc_ones(_n: *mut liquid_double_complex, _r: ::libc::c_uint,
                        _c: ::libc::c_uint) -> ();
    pub fn matrixc_zeros(_x: *mut liquid_double_complex, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixc_gjelim(_x: *mut liquid_double_complex, _r: ::libc::c_uint,
                          _c: ::libc::c_uint) -> ();
    pub fn matrixc_pivot(_x: *mut liquid_double_complex, _rx: ::libc::c_uint,
                         _cx: ::libc::c_uint, _r: ::libc::c_uint,
                         _c: ::libc::c_uint) -> ();
    pub fn matrixc_swaprows(_x: *mut liquid_double_complex,
                            _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                            _r1: ::libc::c_uint, _r2: ::libc::c_uint) -> ();
    pub fn matrixc_linsolve(_A: *mut liquid_double_complex,
                            _n: ::libc::c_uint,
                            _b: *mut liquid_double_complex,
                            _x: *mut liquid_double_complex,
                            _opts: *mut ::libc::c_void) -> ();
    pub fn matrixc_cgsolve(_A: *mut liquid_double_complex, _n: ::libc::c_uint,
                           _b: *mut liquid_double_complex,
                           _x: *mut liquid_double_complex,
                           _opts: *mut ::libc::c_void) -> ();
    pub fn matrixc_ludecomp_crout(_x: *mut liquid_double_complex,
                                  _rx: ::libc::c_uint, _cx: ::libc::c_uint,
                                  _L: *mut liquid_double_complex,
                                  _U: *mut liquid_double_complex,
                                  _P: *mut liquid_double_complex) -> ();
    pub fn matrixc_ludecomp_doolittle(_x: *mut liquid_double_complex,
                                      _rx: ::libc::c_uint,
                                      _cx: ::libc::c_uint,
                                      _L: *mut liquid_double_complex,
                                      _U: *mut liquid_double_complex,
                                      _P: *mut liquid_double_complex) -> ();
    pub fn matrixc_gramschmidt(_A: *mut liquid_double_complex,
                               _r: ::libc::c_uint, _c: ::libc::c_uint,
                               _v: *mut liquid_double_complex) -> ();
    pub fn matrixc_qrdecomp_gramschmidt(_A: *mut liquid_double_complex,
                                        _m: ::libc::c_uint,
                                        _n: ::libc::c_uint,
                                        _Q: *mut liquid_double_complex,
                                        _R: *mut liquid_double_complex) -> ();
    pub fn matrixc_chol(_A: *mut liquid_double_complex, _n: ::libc::c_uint,
                        _L: *mut liquid_double_complex) -> ();
    pub fn smatrixb_create(_M: ::libc::c_uint, _N: ::libc::c_uint)
     -> smatrixb;
    pub fn smatrixb_create_array(_x: *mut ::libc::c_uchar, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint) -> smatrixb;
    pub fn smatrixb_destroy(_q: smatrixb) -> ();
    pub fn smatrixb_print(_q: smatrixb) -> ();
    pub fn smatrixb_print_expanded(_q: smatrixb) -> ();
    pub fn smatrixb_size(_q: smatrixb, _m: *mut ::libc::c_uint,
                         _n: *mut ::libc::c_uint) -> ();
    pub fn smatrixb_clear(_q: smatrixb) -> ();
    pub fn smatrixb_reset(_q: smatrixb) -> ();
    pub fn smatrixb_isset(_q: smatrixb, _m: ::libc::c_uint,
                          _n: ::libc::c_uint) -> ::libc::c_int;
    pub fn smatrixb_insert(_q: smatrixb, _m: ::libc::c_uint,
                           _n: ::libc::c_uint, _v: ::libc::c_uchar) -> ();
    pub fn smatrixb_delete(_q: smatrixb, _m: ::libc::c_uint,
                           _n: ::libc::c_uint) -> ();
    pub fn smatrixb_set(_q: smatrixb, _m: ::libc::c_uint, _n: ::libc::c_uint,
                        _v: ::libc::c_uchar) -> ();
    pub fn smatrixb_get(_q: smatrixb, _m: ::libc::c_uint, _n: ::libc::c_uint)
     -> ::libc::c_uchar;
    pub fn smatrixb_eye(_q: smatrixb) -> ();
    pub fn smatrixb_mul(_x: smatrixb, _y: smatrixb, _z: smatrixb) -> ();
    pub fn smatrixb_vmul(_q: smatrixb, _x: *mut ::libc::c_uchar,
                         _y: *mut ::libc::c_uchar) -> ();
    pub fn smatrixf_create(_M: ::libc::c_uint, _N: ::libc::c_uint)
     -> smatrixf;
    pub fn smatrixf_create_array(_x: *mut ::libc::c_float, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint) -> smatrixf;
    pub fn smatrixf_destroy(_q: smatrixf) -> ();
    pub fn smatrixf_print(_q: smatrixf) -> ();
    pub fn smatrixf_print_expanded(_q: smatrixf) -> ();
    pub fn smatrixf_size(_q: smatrixf, _m: *mut ::libc::c_uint,
                         _n: *mut ::libc::c_uint) -> ();
    pub fn smatrixf_clear(_q: smatrixf) -> ();
    pub fn smatrixf_reset(_q: smatrixf) -> ();
    pub fn smatrixf_isset(_q: smatrixf, _m: ::libc::c_uint,
                          _n: ::libc::c_uint) -> ::libc::c_int;
    pub fn smatrixf_insert(_q: smatrixf, _m: ::libc::c_uint,
                           _n: ::libc::c_uint, _v: ::libc::c_float) -> ();
    pub fn smatrixf_delete(_q: smatrixf, _m: ::libc::c_uint,
                           _n: ::libc::c_uint) -> ();
    pub fn smatrixf_set(_q: smatrixf, _m: ::libc::c_uint, _n: ::libc::c_uint,
                        _v: ::libc::c_float) -> ();
    pub fn smatrixf_get(_q: smatrixf, _m: ::libc::c_uint, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn smatrixf_eye(_q: smatrixf) -> ();
    pub fn smatrixf_mul(_x: smatrixf, _y: smatrixf, _z: smatrixf) -> ();
    pub fn smatrixf_vmul(_q: smatrixf, _x: *mut ::libc::c_float,
                         _y: *mut ::libc::c_float) -> ();
    pub fn smatrixi_create(_M: ::libc::c_uint, _N: ::libc::c_uint)
     -> smatrixi;
    pub fn smatrixi_create_array(_x: *mut ::libc::c_short, _m: ::libc::c_uint,
                                 _n: ::libc::c_uint) -> smatrixi;
    pub fn smatrixi_destroy(_q: smatrixi) -> ();
    pub fn smatrixi_print(_q: smatrixi) -> ();
    pub fn smatrixi_print_expanded(_q: smatrixi) -> ();
    pub fn smatrixi_size(_q: smatrixi, _m: *mut ::libc::c_uint,
                         _n: *mut ::libc::c_uint) -> ();
    pub fn smatrixi_clear(_q: smatrixi) -> ();
    pub fn smatrixi_reset(_q: smatrixi) -> ();
    pub fn smatrixi_isset(_q: smatrixi, _m: ::libc::c_uint,
                          _n: ::libc::c_uint) -> ::libc::c_int;
    pub fn smatrixi_insert(_q: smatrixi, _m: ::libc::c_uint,
                           _n: ::libc::c_uint, _v: ::libc::c_short) -> ();
    pub fn smatrixi_delete(_q: smatrixi, _m: ::libc::c_uint,
                           _n: ::libc::c_uint) -> ();
    pub fn smatrixi_set(_q: smatrixi, _m: ::libc::c_uint, _n: ::libc::c_uint,
                        _v: ::libc::c_short) -> ();
    pub fn smatrixi_get(_q: smatrixi, _m: ::libc::c_uint, _n: ::libc::c_uint)
     -> ::libc::c_short;
    pub fn smatrixi_eye(_q: smatrixi) -> ();
    pub fn smatrixi_mul(_x: smatrixi, _y: smatrixi, _z: smatrixi) -> ();
    pub fn smatrixi_vmul(_q: smatrixi, _x: *mut ::libc::c_short,
                         _y: *mut ::libc::c_short) -> ();
    pub fn smatrixb_mulf(_A: smatrixb, _x: *mut ::libc::c_float,
                         _mx: ::libc::c_uint, _nx: ::libc::c_uint,
                         _y: *mut ::libc::c_float, _my: ::libc::c_uint,
                         _ny: ::libc::c_uint) -> ();
    pub fn smatrixb_vmulf(_q: smatrixb, _x: *mut ::libc::c_float,
                          _y: *mut ::libc::c_float) -> ();
    pub fn liquid_print_modulation_schemes() -> ();
    pub fn liquid_getopt_str2mod(_str: *const ::libc::c_char)
     -> modulation_scheme;
    pub fn liquid_modem_is_psk(_ms: modulation_scheme) -> ::libc::c_int;
    pub fn liquid_modem_is_dpsk(_ms: modulation_scheme) -> ::libc::c_int;
    pub fn liquid_modem_is_ask(_ms: modulation_scheme) -> ::libc::c_int;
    pub fn liquid_modem_is_qam(_ms: modulation_scheme) -> ::libc::c_int;
    pub fn liquid_modem_is_apsk(_ms: modulation_scheme) -> ::libc::c_int;
    pub fn count_bit_errors(_s1: ::libc::c_uint, _s2: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn count_bit_errors_array(_msg0: *mut ::libc::c_uchar,
                                  _msg1: *mut ::libc::c_uchar,
                                  _n: ::libc::c_uint) -> ::libc::c_uint;
    pub fn gray_encode(symbol_in: ::libc::c_uint) -> ::libc::c_uint;
    pub fn gray_decode(symbol_in: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_pack_soft_bits(_soft_bits: *mut ::libc::c_uchar,
                                 _bps: ::libc::c_uint,
                                 _sym_out: *mut ::libc::c_uint) -> ();
    pub fn liquid_unpack_soft_bits(_sym_in: ::libc::c_uint,
                                   _bps: ::libc::c_uint,
                                   _soft_bits: *mut ::libc::c_uchar) -> ();
    pub fn modem_create(_scheme: modulation_scheme) -> modem;
    pub fn modem_create_arbitrary(_table: *mut liquid_float_complex,
                                  _M: ::libc::c_uint) -> modem;
    pub fn modem_recreate(_q: modem, _scheme: modulation_scheme) -> modem;
    pub fn modem_destroy(_q: modem) -> ();
    pub fn modem_print(_q: modem) -> ();
    pub fn modem_reset(_q: modem) -> ();
    pub fn modem_gen_rand_sym(_q: modem) -> ::libc::c_uint;
    pub fn modem_get_bps(_q: modem) -> ::libc::c_uint;
    pub fn modem_get_scheme(_q: modem) -> modulation_scheme;
    pub fn modem_modulate(_q: modem, _s: ::libc::c_uint,
                          _y: *mut liquid_float_complex) -> ();
    pub fn modem_demodulate(_q: modem, _x: liquid_float_complex,
                            _s: *mut ::libc::c_uint) -> ();
    pub fn modem_demodulate_soft(_q: modem, _x: liquid_float_complex,
                                 _s: *mut ::libc::c_uint,
                                 _soft_bits: *mut ::libc::c_uchar) -> ();
    pub fn modem_get_demodulator_sample(_q: modem,
                                        _x_hat: *mut liquid_float_complex)
     -> ();
    pub fn modem_get_demodulator_phase_error(_q: modem) -> ::libc::c_float;
    pub fn modem_get_demodulator_evm(_q: modem) -> ::libc::c_float;
    pub fn gmskmod_create(_k: ::libc::c_uint, _m: ::libc::c_uint,
                          _BT: ::libc::c_float) -> gmskmod;
    pub fn gmskmod_destroy(_q: gmskmod) -> ();
    pub fn gmskmod_print(_q: gmskmod) -> ();
    pub fn gmskmod_reset(_q: gmskmod) -> ();
    pub fn gmskmod_modulate(_q: gmskmod, _sym: ::libc::c_uint,
                            _y: *mut liquid_float_complex) -> ();
    pub fn gmskdem_create(_k: ::libc::c_uint, _m: ::libc::c_uint,
                          _BT: ::libc::c_float) -> gmskdem;
    pub fn gmskdem_destroy(_q: gmskdem) -> ();
    pub fn gmskdem_print(_q: gmskdem) -> ();
    pub fn gmskdem_reset(_q: gmskdem) -> ();
    pub fn gmskdem_set_eq_bw(_q: gmskdem, _bw: ::libc::c_float) -> ();
    pub fn gmskdem_demodulate(_q: gmskdem, _y: *mut liquid_float_complex,
                              _sym: *mut ::libc::c_uint) -> ();
    pub fn freqmod_create(_kf: ::libc::c_float) -> freqmod;
    pub fn freqmod_destroy(_q: freqmod) -> ();
    pub fn freqmod_print(_q: freqmod) -> ();
    pub fn freqmod_reset(_q: freqmod) -> ();
    pub fn freqmod_modulate(_q: freqmod, _m: ::libc::c_float,
                            _s: *mut liquid_float_complex) -> ();
    pub fn freqmod_modulate_block(_q: freqmod, _m: *mut ::libc::c_float,
                                  _n: ::libc::c_uint,
                                  _s: *mut liquid_float_complex) -> ();
    pub fn freqdem_create(_kf: ::libc::c_float) -> freqdem;
    pub fn freqdem_destroy(_q: freqdem) -> ();
    pub fn freqdem_print(_q: freqdem) -> ();
    pub fn freqdem_reset(_q: freqdem) -> ();
    pub fn freqdem_demodulate(_q: freqdem, _r: liquid_float_complex,
                              _m: *mut ::libc::c_float) -> ();
    pub fn freqdem_demodulate_block(_q: freqdem,
                                    _r: *mut liquid_float_complex,
                                    _n: ::libc::c_uint,
                                    _m: *mut ::libc::c_float) -> ();
    pub fn ampmodem_create(_m: ::libc::c_float, _fc: ::libc::c_float,
                           _type: liquid_ampmodem_type,
                           _suppressed_carrier: ::libc::c_int) -> ampmodem;
    pub fn ampmodem_destroy(_fm: ampmodem) -> ();
    pub fn ampmodem_print(_fm: ampmodem) -> ();
    pub fn ampmodem_reset(_fm: ampmodem) -> ();
    pub fn ampmodem_modulate(_fm: ampmodem, _x: ::libc::c_float,
                             _y: *mut liquid_float_complex) -> ();
    pub fn ampmodem_demodulate(_fm: ampmodem, _y: liquid_float_complex,
                               _x: *mut ::libc::c_float) -> ();
    pub fn firpfbch_crcf_create(_type: ::libc::c_int, _M: ::libc::c_uint,
                                _p: ::libc::c_uint, _h: *mut ::libc::c_float)
     -> firpfbch_crcf;
    pub fn firpfbch_crcf_create_kaiser(_type: ::libc::c_int,
                                       _M: ::libc::c_uint, _m: ::libc::c_uint,
                                       _As: ::libc::c_float) -> firpfbch_crcf;
    pub fn firpfbch_crcf_create_rnyquist(_type: ::libc::c_int,
                                         _M: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _ftype: ::libc::c_int)
     -> firpfbch_crcf;
    pub fn firpfbch_crcf_destroy(_q: firpfbch_crcf) -> ();
    pub fn firpfbch_crcf_reset(_q: firpfbch_crcf) -> ();
    pub fn firpfbch_crcf_print(_q: firpfbch_crcf) -> ();
    pub fn firpfbch_crcf_synthesizer_execute(_q: firpfbch_crcf,
                                             _x: *mut liquid_float_complex,
                                             _y: *mut liquid_float_complex)
     -> ();
    pub fn firpfbch_crcf_analyzer_execute(_q: firpfbch_crcf,
                                          _x: *mut liquid_float_complex,
                                          _y: *mut liquid_float_complex)
     -> ();
    pub fn firpfbch_cccf_create(_type: ::libc::c_int, _M: ::libc::c_uint,
                                _p: ::libc::c_uint,
                                _h: *mut liquid_float_complex)
     -> firpfbch_cccf;
    pub fn firpfbch_cccf_create_kaiser(_type: ::libc::c_int,
                                       _M: ::libc::c_uint, _m: ::libc::c_uint,
                                       _As: ::libc::c_float) -> firpfbch_cccf;
    pub fn firpfbch_cccf_create_rnyquist(_type: ::libc::c_int,
                                         _M: ::libc::c_uint,
                                         _m: ::libc::c_uint,
                                         _beta: ::libc::c_float,
                                         _ftype: ::libc::c_int)
     -> firpfbch_cccf;
    pub fn firpfbch_cccf_destroy(_q: firpfbch_cccf) -> ();
    pub fn firpfbch_cccf_reset(_q: firpfbch_cccf) -> ();
    pub fn firpfbch_cccf_print(_q: firpfbch_cccf) -> ();
    pub fn firpfbch_cccf_synthesizer_execute(_q: firpfbch_cccf,
                                             _x: *mut liquid_float_complex,
                                             _y: *mut liquid_float_complex)
     -> ();
    pub fn firpfbch_cccf_analyzer_execute(_q: firpfbch_cccf,
                                          _x: *mut liquid_float_complex,
                                          _y: *mut liquid_float_complex)
     -> ();
    pub fn firpfbch2_crcf_create(_type: ::libc::c_int, _M: ::libc::c_uint,
                                 _m: ::libc::c_uint, _h: *mut ::libc::c_float)
     -> firpfbch2_crcf;
    pub fn firpfbch2_crcf_create_kaiser(_type: ::libc::c_int,
                                        _M: ::libc::c_uint,
                                        _m: ::libc::c_uint,
                                        _As: ::libc::c_float)
     -> firpfbch2_crcf;
    pub fn firpfbch2_crcf_destroy(_q: firpfbch2_crcf) -> ();
    pub fn firpfbch2_crcf_reset(_q: firpfbch2_crcf) -> ();
    pub fn firpfbch2_crcf_print(_q: firpfbch2_crcf) -> ();
    pub fn firpfbch2_crcf_execute(_q: firpfbch2_crcf,
                                  _x: *mut liquid_float_complex,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn ofdmframe_init_default_sctype(_M: ::libc::c_uint,
                                         _p: *mut ::libc::c_uchar) -> ();
    pub fn ofdmframe_validate_sctype(_p: *mut ::libc::c_uchar,
                                     _M: ::libc::c_uint,
                                     _M_null: *mut ::libc::c_uint,
                                     _M_pilot: *mut ::libc::c_uint,
                                     _M_data: *mut ::libc::c_uint) -> ();
    pub fn ofdmframe_print_sctype(_p: *mut ::libc::c_uchar,
                                  _M: ::libc::c_uint) -> ();
    pub fn ofdmframegen_create(_M: ::libc::c_uint, _cp_len: ::libc::c_uint,
                               _taper_len: ::libc::c_uint,
                               _p: *mut ::libc::c_uchar) -> ofdmframegen;
    pub fn ofdmframegen_destroy(_q: ofdmframegen) -> ();
    pub fn ofdmframegen_print(_q: ofdmframegen) -> ();
    pub fn ofdmframegen_reset(_q: ofdmframegen) -> ();
    pub fn ofdmframegen_write_S0a(_q: ofdmframegen,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn ofdmframegen_write_S0b(_q: ofdmframegen,
                                  _y: *mut liquid_float_complex) -> ();
    pub fn ofdmframegen_write_S1(_q: ofdmframegen,
                                 _y: *mut liquid_float_complex) -> ();
    pub fn ofdmframegen_writesymbol(_q: ofdmframegen,
                                    _x: *mut liquid_float_complex,
                                    _y: *mut liquid_float_complex) -> ();
    pub fn ofdmframegen_writetail(_q: ofdmframegen,
                                  _x: *mut liquid_float_complex) -> ();
    pub fn ofdmframesync_create(_M: ::libc::c_uint, _cp_len: ::libc::c_uint,
                                _taper_len: ::libc::c_uint,
                                _p: *mut ::libc::c_uchar,
                                _callback: ofdmframesync_callback,
                                _userdata: *mut ::libc::c_void)
     -> ofdmframesync;
    pub fn ofdmframesync_destroy(_q: ofdmframesync) -> ();
    pub fn ofdmframesync_print(_q: ofdmframesync) -> ();
    pub fn ofdmframesync_reset(_q: ofdmframesync) -> ();
    pub fn ofdmframesync_execute(_q: ofdmframesync,
                                 _x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> ();
    pub fn ofdmframesync_get_rssi(_q: ofdmframesync) -> ::libc::c_float;
    pub fn ofdmframesync_get_cfo(_q: ofdmframesync) -> ::libc::c_float;
    pub fn ofdmframesync_debug_enable(_q: ofdmframesync) -> ();
    pub fn ofdmframesync_debug_disable(_q: ofdmframesync) -> ();
    pub fn ofdmframesync_debug_print(_q: ofdmframesync,
                                     _filename: *const ::libc::c_char) -> ();
    pub fn nco_crcf_create(_type: liquid_ncotype) -> nco_crcf;
    pub fn nco_crcf_destroy(_q: nco_crcf) -> ();
    pub fn nco_crcf_print(_q: nco_crcf) -> ();
    pub fn nco_crcf_reset(_q: nco_crcf) -> ();
    pub fn nco_crcf_get_frequency(_q: nco_crcf) -> ::libc::c_float;
    pub fn nco_crcf_set_frequency(_q: nco_crcf, _f: ::libc::c_float) -> ();
    pub fn nco_crcf_adjust_frequency(_q: nco_crcf, _df: ::libc::c_float)
     -> ();
    pub fn nco_crcf_get_phase(_q: nco_crcf) -> ::libc::c_float;
    pub fn nco_crcf_set_phase(_q: nco_crcf, _phi: ::libc::c_float) -> ();
    pub fn nco_crcf_adjust_phase(_q: nco_crcf, _dphi: ::libc::c_float) -> ();
    pub fn nco_crcf_step(_q: nco_crcf) -> ();
    pub fn nco_crcf_sin(_q: nco_crcf) -> ::libc::c_float;
    pub fn nco_crcf_cos(_q: nco_crcf) -> ::libc::c_float;
    pub fn nco_crcf_sincos(_q: nco_crcf, _s: *mut ::libc::c_float,
                           _c: *mut ::libc::c_float) -> ();
    pub fn nco_crcf_cexpf(_q: nco_crcf, _y: *mut liquid_float_complex) -> ();
    pub fn nco_crcf_pll_set_bandwidth(_q: nco_crcf,
                                      _bandwidth: ::libc::c_float) -> ();
    pub fn nco_crcf_pll_step(_q: nco_crcf, _dphi: ::libc::c_float) -> ();
    pub fn nco_crcf_mix_up(_q: nco_crcf, _x: liquid_float_complex,
                           _y: *mut liquid_float_complex) -> ();
    pub fn nco_crcf_mix_down(_q: nco_crcf, _x: liquid_float_complex,
                             _y: *mut liquid_float_complex) -> ();
    pub fn nco_crcf_mix_block_up(_q: nco_crcf, _x: *mut liquid_float_complex,
                                 _y: *mut liquid_float_complex,
                                 _N: ::libc::c_uint) -> ();
    pub fn nco_crcf_mix_block_down(_q: nco_crcf,
                                   _x: *mut liquid_float_complex,
                                   _y: *mut liquid_float_complex,
                                   _N: ::libc::c_uint) -> ();
    pub fn liquid_unwrap_phase(_theta: *mut ::libc::c_float,
                               _n: ::libc::c_uint) -> ();
    pub fn liquid_unwrap_phase2(_theta: *mut ::libc::c_float,
                                _n: ::libc::c_uint) -> ();
    pub fn liquid_rosenbrock(_userdata: *mut ::libc::c_void,
                             _v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_invgauss(_userdata: *mut ::libc::c_void,
                           _v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_multimodal(_userdata: *mut ::libc::c_void,
                             _v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_spiral(_userdata: *mut ::libc::c_void,
                         _v: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn gradsearch_create(_userdata: *mut ::libc::c_void,
                             _v: *mut ::libc::c_float,
                             _num_parameters: ::libc::c_uint,
                             _utility: utility_function,
                             _direction: ::libc::c_int) -> gradsearch;
    pub fn gradsearch_destroy(_q: gradsearch) -> ();
    pub fn gradsearch_print(_q: gradsearch) -> ();
    pub fn gradsearch_step(_q: gradsearch) -> ::libc::c_float;
    pub fn gradsearch_execute(_q: gradsearch, _max_iterations: ::libc::c_uint,
                              _target_utility: ::libc::c_float)
     -> ::libc::c_float;
    pub fn qnsearch_create(_userdata: *mut ::libc::c_void,
                           _v: *mut ::libc::c_float,
                           _num_parameters: ::libc::c_uint,
                           _u: utility_function, _direction: ::libc::c_int)
     -> qnsearch;
    pub fn qnsearch_destroy(_g: qnsearch) -> ();
    pub fn qnsearch_print(_g: qnsearch) -> ();
    pub fn qnsearch_reset(_g: qnsearch) -> ();
    pub fn qnsearch_step(_g: qnsearch) -> ();
    pub fn qnsearch_execute(_g: qnsearch, _max_iterations: ::libc::c_uint,
                            _target_utility: ::libc::c_float)
     -> ::libc::c_float;
    pub fn chromosome_create(_bits_per_trait: *mut ::libc::c_uint,
                             _num_traits: ::libc::c_uint) -> chromosome;
    pub fn chromosome_create_basic(_num_traits: ::libc::c_uint,
                                   _bits_per_trait: ::libc::c_uint)
     -> chromosome;
    pub fn chromosome_create_clone(_parent: chromosome) -> chromosome;
    pub fn chromosome_copy(_parent: chromosome, _child: chromosome) -> ();
    pub fn chromosome_destroy(_c: chromosome) -> ();
    pub fn chromosome_get_num_traits(_c: chromosome) -> ::libc::c_uint;
    pub fn chromosome_print(_c: chromosome) -> ();
    pub fn chromosome_printf(_c: chromosome) -> ();
    pub fn chromosome_clear(_c: chromosome) -> ();
    pub fn chromosome_init(_c: chromosome, _v: *mut ::libc::c_uint) -> ();
    pub fn chromosome_initf(_c: chromosome, _v: *mut ::libc::c_float) -> ();
    pub fn chromosome_mutate(_c: chromosome, _index: ::libc::c_uint) -> ();
    pub fn chromosome_crossover(_p1: chromosome, _p2: chromosome,
                                _c: chromosome, _threshold: ::libc::c_uint)
     -> ();
    pub fn chromosome_init_random(_c: chromosome) -> ();
    pub fn chromosome_value(_c: chromosome, _index: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn chromosome_valuef(_c: chromosome, _index: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn gasearch_create(_u: gasearch_utility,
                           _userdata: *mut ::libc::c_void,
                           _parent: chromosome, _minmax: ::libc::c_int)
     -> gasearch;
    pub fn gasearch_create_advanced(_utility: gasearch_utility,
                                    _userdata: *mut ::libc::c_void,
                                    _parent: chromosome,
                                    _minmax: ::libc::c_int,
                                    _population_size: ::libc::c_uint,
                                    _mutation_rate: ::libc::c_float)
     -> gasearch;
    pub fn gasearch_destroy(_q: gasearch) -> ();
    pub fn gasearch_print(_q: gasearch) -> ();
    pub fn gasearch_set_mutation_rate(_q: gasearch,
                                      _mutation_rate: ::libc::c_float) -> ();
    pub fn gasearch_set_population_size(_q: gasearch,
                                        _population_size: ::libc::c_uint,
                                        _selection_size: ::libc::c_uint)
     -> ();
    pub fn gasearch_run(_q: gasearch, _max_iterations: ::libc::c_uint,
                        _target_utility: ::libc::c_float) -> ::libc::c_float;
    pub fn gasearch_evolve(_q: gasearch) -> ();
    pub fn gasearch_getopt(_q: gasearch, _c: chromosome,
                           _utility_opt: *mut ::libc::c_float) -> ();
    pub fn compress_mulaw(_x: ::libc::c_float, _mu: ::libc::c_float)
     -> ::libc::c_float;
    pub fn expand_mulaw(_x: ::libc::c_float, _mu: ::libc::c_float)
     -> ::libc::c_float;
    pub fn compress_cf_mulaw(_x: liquid_float_complex, _mu: ::libc::c_float,
                             _y: *mut liquid_float_complex) -> ();
    pub fn expand_cf_mulaw(_y: liquid_float_complex, _mu: ::libc::c_float,
                           _x: *mut liquid_float_complex) -> ();
    pub fn quantize_adc(_x: ::libc::c_float, _num_bits: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn quantize_dac(_s: ::libc::c_uint, _num_bits: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn quantizerf_create(_ctype: liquid_compander_type,
                             _range: ::libc::c_float,
                             _num_bits: ::libc::c_uint) -> quantizerf;
    pub fn quantizerf_destroy(_q: quantizerf) -> ();
    pub fn quantizerf_print(_q: quantizerf) -> ();
    pub fn quantizerf_execute_adc(_q: quantizerf, _x: ::libc::c_float,
                                  _sample: *mut ::libc::c_uint) -> ();
    pub fn quantizerf_execute_dac(_q: quantizerf, _sample: ::libc::c_uint,
                                  _x: *mut ::libc::c_float) -> ();
    pub fn quantizercf_create(_ctype: liquid_compander_type,
                              _range: ::libc::c_float,
                              _num_bits: ::libc::c_uint) -> quantizercf;
    pub fn quantizercf_destroy(_q: quantizercf) -> ();
    pub fn quantizercf_print(_q: quantizercf) -> ();
    pub fn quantizercf_execute_adc(_q: quantizercf, _x: liquid_float_complex,
                                   _sample: *mut ::libc::c_uint) -> ();
    pub fn quantizercf_execute_dac(_q: quantizercf, _sample: ::libc::c_uint,
                                   _x: *mut liquid_float_complex) -> ();
    pub fn randf() -> ::libc::c_float;
    pub fn randf_pdf(_x: ::libc::c_float) -> ::libc::c_float;
    pub fn randf_cdf(_x: ::libc::c_float) -> ::libc::c_float;
    pub fn randnf() -> ::libc::c_float;
    pub fn awgn(_x: *mut ::libc::c_float, _nstd: ::libc::c_float) -> ();
    pub fn crandnf(_y: *mut liquid_float_complex) -> ();
    pub fn cawgn(_x: *mut liquid_float_complex, _nstd: ::libc::c_float) -> ();
    pub fn randnf_pdf(_x: ::libc::c_float, _eta: ::libc::c_float,
                      _sig: ::libc::c_float) -> ::libc::c_float;
    pub fn randnf_cdf(_x: ::libc::c_float, _eta: ::libc::c_float,
                      _sig: ::libc::c_float) -> ::libc::c_float;
    pub fn randexpf(_lambda: ::libc::c_float) -> ::libc::c_float;
    pub fn randexpf_pdf(_x: ::libc::c_float, _lambda: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randexpf_cdf(_x: ::libc::c_float, _lambda: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randweibf(_alpha: ::libc::c_float, _beta: ::libc::c_float,
                     _gamma: ::libc::c_float) -> ::libc::c_float;
    pub fn randweibf_pdf(_x: ::libc::c_float, _a: ::libc::c_float,
                         _b: ::libc::c_float, _g: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randweibf_cdf(_x: ::libc::c_float, _a: ::libc::c_float,
                         _b: ::libc::c_float, _g: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randgammaf(_alpha: ::libc::c_float, _beta: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randgammaf_pdf(_x: ::libc::c_float, _alpha: ::libc::c_float,
                          _beta: ::libc::c_float) -> ::libc::c_float;
    pub fn randgammaf_cdf(_x: ::libc::c_float, _alpha: ::libc::c_float,
                          _beta: ::libc::c_float) -> ::libc::c_float;
    pub fn randnakmf(_m: ::libc::c_float, _omega: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randnakmf_pdf(_x: ::libc::c_float, _m: ::libc::c_float,
                         _omega: ::libc::c_float) -> ::libc::c_float;
    pub fn randnakmf_cdf(_x: ::libc::c_float, _m: ::libc::c_float,
                         _omega: ::libc::c_float) -> ::libc::c_float;
    pub fn randricekf(_K: ::libc::c_float, _omega: ::libc::c_float)
     -> ::libc::c_float;
    pub fn randricekf_cdf(_x: ::libc::c_float, _K: ::libc::c_float,
                          _omega: ::libc::c_float) -> ::libc::c_float;
    pub fn randricekf_pdf(_x: ::libc::c_float, _K: ::libc::c_float,
                          _omega: ::libc::c_float) -> ::libc::c_float;
    pub fn scramble_data(_x: *mut ::libc::c_uchar, _len: ::libc::c_uint)
     -> ();
    pub fn unscramble_data(_x: *mut ::libc::c_uchar, _len: ::libc::c_uint)
     -> ();
    pub fn unscramble_data_soft(_x: *mut ::libc::c_uchar,
                                _len: ::libc::c_uint) -> ();
    pub fn bsequence_create(num_bits: ::libc::c_uint) -> bsequence;
    pub fn bsequence_destroy(_bs: bsequence) -> ();
    pub fn bsequence_clear(_bs: bsequence) -> ();
    pub fn bsequence_init(_bs: bsequence, _v: *mut ::libc::c_uchar) -> ();
    pub fn bsequence_print(_bs: bsequence) -> ();
    pub fn bsequence_push(_bs: bsequence, _bit: ::libc::c_uint) -> ();
    pub fn bsequence_circshift(_bs: bsequence) -> ();
    pub fn bsequence_correlate(_bs1: bsequence, _bs2: bsequence)
     -> ::libc::c_int;
    pub fn bsequence_add(_bs1: bsequence, _bs2: bsequence, _bs3: bsequence)
     -> ();
    pub fn bsequence_mul(_bs1: bsequence, _bs2: bsequence, _bs3: bsequence)
     -> ();
    pub fn bsequence_accumulate(_bs: bsequence) -> ::libc::c_uint;
    pub fn bsequence_get_length(_bs: bsequence) -> ::libc::c_uint;
    pub fn bsequence_index(_bs: bsequence, _i: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn bsequence_create_ccodes(_a: bsequence, _b: bsequence) -> ();
    pub fn msequence_create(_m: ::libc::c_uint, _g: ::libc::c_uint,
                            _a: ::libc::c_uint) -> msequence;
    pub fn msequence_create_genpoly(_g: ::libc::c_uint) -> msequence;
    pub fn msequence_create_default(_m: ::libc::c_uint) -> msequence;
    pub fn msequence_destroy(_m: msequence) -> ();
    pub fn msequence_print(_m: msequence) -> ();
    pub fn msequence_advance(_ms: msequence) -> ::libc::c_uint;
    pub fn msequence_generate_symbol(_ms: msequence, _bps: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn msequence_reset(_ms: msequence) -> ();
    pub fn bsequence_init_msequence(_bs: bsequence, _ms: msequence) -> ();
    pub fn msequence_get_length(_ms: msequence) -> ::libc::c_uint;
    pub fn msequence_get_state(_ms: msequence) -> ::libc::c_uint;
    pub fn msequence_set_state(_ms: msequence, _a: ::libc::c_uint) -> ();
    pub fn liquid_pack_array(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                             _k: ::libc::c_uint, _b: ::libc::c_uint,
                             _sym_in: ::libc::c_uchar) -> ();
    pub fn liquid_unpack_array(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                               _k: ::libc::c_uint, _b: ::libc::c_uint,
                               _sym_out: *mut ::libc::c_uchar) -> ();
    pub fn liquid_pack_bytes(_sym_in: *mut ::libc::c_uchar,
                             _sym_in_len: ::libc::c_uint,
                             _sym_out: *mut ::libc::c_uchar,
                             _sym_out_len: ::libc::c_uint,
                             _num_written: *mut ::libc::c_uint) -> ();
    pub fn liquid_unpack_bytes(_sym_in: *mut ::libc::c_uchar,
                               _sym_in_len: ::libc::c_uint,
                               _sym_out: *mut ::libc::c_uchar,
                               _sym_out_len: ::libc::c_uint,
                               _num_written: *mut ::libc::c_uint) -> ();
    pub fn liquid_repack_bytes(_sym_in: *mut ::libc::c_uchar,
                               _sym_in_bps: ::libc::c_uint,
                               _sym_in_len: ::libc::c_uint,
                               _sym_out: *mut ::libc::c_uchar,
                               _sym_out_bps: ::libc::c_uint,
                               _sym_out_len: ::libc::c_uint,
                               _num_written: *mut ::libc::c_uint) -> ();
    pub fn liquid_lbshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                          _b: ::libc::c_uint) -> ();
    pub fn liquid_rbshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                          _b: ::libc::c_uint) -> ();
    pub fn liquid_lbcircshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                              _b: ::libc::c_uint) -> ();
    pub fn liquid_rbcircshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                              _b: ::libc::c_uint) -> ();
    pub fn liquid_lshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                         _b: ::libc::c_uint) -> ();
    pub fn liquid_rshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                         _b: ::libc::c_uint) -> ();
    pub fn liquid_lcircshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                             _b: ::libc::c_uint) -> ();
    pub fn liquid_rcircshift(_src: *mut ::libc::c_uchar, _n: ::libc::c_uint,
                             _b: ::libc::c_uint) -> ();
    pub fn liquid_count_ones(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_count_ones_mod2(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_bdotprod(_x: ::libc::c_uint, _y: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn liquid_count_leading_zeros(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_msb_index(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_print_bitstring(_x: ::libc::c_uint, _n: ::libc::c_uint)
     -> ();
    pub fn liquid_reverse_byte(_x: ::libc::c_uchar) -> ::libc::c_uchar;
    pub fn liquid_reverse_uint16(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_reverse_uint24(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_reverse_uint32(_x: ::libc::c_uint) -> ::libc::c_uint;
    pub fn liquid_vectorf_init(_c: ::libc::c_float, _x: *mut ::libc::c_float,
                               _n: ::libc::c_uint) -> ();
    pub fn liquid_vectorf_add(_x: *mut ::libc::c_float,
                              _y: *mut ::libc::c_float, _n: ::libc::c_uint,
                              _z: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorf_addscalar(_x: *mut ::libc::c_float,
                                    _n: ::libc::c_uint, _c: ::libc::c_float,
                                    _y: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorf_mul(_x: *mut ::libc::c_float,
                              _y: *mut ::libc::c_float, _n: ::libc::c_uint,
                              _z: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorf_mulscalar(_x: *mut ::libc::c_float,
                                    _n: ::libc::c_uint, _c: ::libc::c_float,
                                    _y: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorf_cexpj(_theta: *mut ::libc::c_float,
                                _n: ::libc::c_uint, _x: *mut ::libc::c_float)
     -> ();
    pub fn liquid_vectorf_carg(_x: *mut ::libc::c_float, _n: ::libc::c_uint,
                               _theta: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorf_abs(_x: *mut ::libc::c_float, _n: ::libc::c_uint,
                              _y: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorf_sumsq(_x: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_vectorf_norm(_x: *mut ::libc::c_float, _n: ::libc::c_uint)
     -> ::libc::c_float;
    pub fn liquid_vectorf_pnorm(_x: *mut ::libc::c_float, _n: ::libc::c_uint,
                                _p: ::libc::c_float) -> ::libc::c_float;
    pub fn liquid_vectorf_normalize(_x: *mut ::libc::c_float,
                                    _n: ::libc::c_uint,
                                    _y: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorcf_init(_c: liquid_float_complex,
                                _x: *mut liquid_float_complex,
                                _n: ::libc::c_uint) -> ();
    pub fn liquid_vectorcf_add(_x: *mut liquid_float_complex,
                               _y: *mut liquid_float_complex,
                               _n: ::libc::c_uint,
                               _z: *mut liquid_float_complex) -> ();
    pub fn liquid_vectorcf_addscalar(_x: *mut liquid_float_complex,
                                     _n: ::libc::c_uint,
                                     _c: liquid_float_complex,
                                     _y: *mut liquid_float_complex) -> ();
    pub fn liquid_vectorcf_mul(_x: *mut liquid_float_complex,
                               _y: *mut liquid_float_complex,
                               _n: ::libc::c_uint,
                               _z: *mut liquid_float_complex) -> ();
    pub fn liquid_vectorcf_mulscalar(_x: *mut liquid_float_complex,
                                     _n: ::libc::c_uint,
                                     _c: liquid_float_complex,
                                     _y: *mut liquid_float_complex) -> ();
    pub fn liquid_vectorcf_cexpj(_theta: *mut ::libc::c_float,
                                 _n: ::libc::c_uint,
                                 _x: *mut liquid_float_complex) -> ();
    pub fn liquid_vectorcf_carg(_x: *mut liquid_float_complex,
                                _n: ::libc::c_uint,
                                _theta: *mut ::libc::c_float) -> ();
    pub fn liquid_vectorcf_abs(_x: *mut liquid_float_complex,
                               _n: ::libc::c_uint, _y: *mut ::libc::c_float)
     -> ();
    pub fn liquid_vectorcf_sumsq(_x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint) -> ::libc::c_float;
    pub fn liquid_vectorcf_norm(_x: *mut liquid_float_complex,
                                _n: ::libc::c_uint) -> ::libc::c_float;
    pub fn liquid_vectorcf_pnorm(_x: *mut liquid_float_complex,
                                 _n: ::libc::c_uint, _p: ::libc::c_float)
     -> ::libc::c_float;
    pub fn liquid_vectorcf_normalize(_x: *mut liquid_float_complex,
                                     _n: ::libc::c_uint,
                                     _y: *mut liquid_float_complex) -> ();
}
